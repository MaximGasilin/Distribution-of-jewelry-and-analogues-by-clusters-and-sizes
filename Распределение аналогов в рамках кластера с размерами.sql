BEGIN /* Настройка временных таблиц */
	
	BEGIN -- Таблицы входящих для этого алгоритма данных

		DROP TABLE IF EXISTS #ОстаткиТТ_СХарактеристиками
		CREATE TABLE #ОстаткиТТ_СХарактеристиками(
			ТорговаяТочка varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,ХарактеристикаНоменклатуры varchar(50)
			,Количество Numeric(10)
			)

		DROP TABLE IF EXISTS #ОстаткиСклада_СХарактеристиками
		CREATE TABLE #ОстаткиСклада_СХарактеристиками(
			НомерСтроки bigint
			,Склад varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,ХарактеристикаНоменклатуры varchar(50)
			,Количество Numeric(10)
			)

		DROP TABLE IF EXISTS #ОстаткиТТ
		CREATE TABLE #ОстаткиТТ(
			ТорговаяТочка varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,Количество Numeric(10)
			)

		DROP TABLE IF EXISTS #ОстаткиСклада
		CREATE TABLE #ОстаткиСклада(
			НомерСтроки bigint
			,Склад varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,Количество Numeric(10)
			)

		DROP TABLE IF EXISTS #Потребность
		CREATE TABLE #Потребность(
			НомерСтроки bigint
			,ТорговаяТочка varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Количество numeric(10)
			,Подтверждено numeric(10)
			)

	-- Таблицы входящих для этого алгоритма данных
	END 

	BEGIN -- Объявление скалярных переменных
		
		DECLARE @WHILE_FLAG_01 bigint = 0

		-- для 5-й фазы
		DECLARE
			@КоличествоНеприсвоенныхРейтингов bigint = 0
			,@ОстаВалосьРаспределить bigint = 0
			,@ОсталосьРаспределить bigint = 0
			,@ОсталосьБатчей bigint = 0
			,@ТекущийРейтинг bigint = 1

	-- Объявление скалярных переменных
	END

	BEGIN -- Дополнительные вспомогательные таблицы

		DROP TABLE IF EXISTS #МаксимальныеОстаткиТТ
		CREATE TABLE #МаксимальныеОстаткиТТ(
			ТорговаяТочка varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,Количество numeric(10)
			)
		
		DROP TABLE IF EXISTS #ТаблицаСтоимостейДоставки
		CREATE TABLE #ТаблицаСтоимостейДоставки(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,ТорговаяТочка varchar(50)
			,СтоимостьПеревозки numeric(10)
			)

		/*
		DROP TABLE IF EXISTS #МаксимальноеПредложениеКластера
		CREATE TABLE #МаксимальноеПредложениеКластера(
			КластерДляПодсортировки varchar(50)
			,Количество Numeric(10)
			)
		*/


		DROP TABLE IF EXISTS #Спрос_II
		CREATE TABLE #Спрос_II(
			НомерСТП bigint -- Номер строки таблицы Потребности
			,ТорговаяТочка varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,КоличествоСТП Numeric(10)
			,МестоВнутриСТП bigint
			,Количество Numeric(10) -- В концепции этого алгоритма данное значение должно быть равно 1.
			,ПорядокСоединения bigint
			)

		DROP TABLE IF EXISTS #Предложение_II
		CREATE TABLE #Предложение_II(
			НомерСТОС bigint -- Номер строки таблицы Остатков склада
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,КоличествоСТОС Numeric(10)
			,Количество Numeric(10) -- В концепции этого алгоритма данное значение должно быть равно 1.
			,ПорядокСоединения bigint
			)

		DROP TABLE IF EXISTS #ФазаРаспределения_II
		CREATE TABLE #ФазаРаспределения_II( 
			НомерСТП bigint
			,ТорговаяТочка varchar(50)
			,КластерДляПодсортировки varchar(50)
			,Номенклатура varchar(50)
			,КоличествоСТП Numeric(10)
			,МестоВнутриСТП bigint
			,КоличествоСпроса Numeric(10)
			,ПорядокСоединенияСпроса bigint
			,НомерСТОС bigint
			,ПорядокСоединенияПредложения bigint
			)

		-- Для 5-й фазы распределения.
		
		DROP TABLE IF EXISTS #ТекущаяМартицаКоэффициентов
		CREATE TABLE #ТекущаяМартицаКоэффициентов(
			ТорговаяТочка varchar(50)
			,Кластер varchar(50)
			,Номенклатура varchar(50)
			,ХарактеристикаНоменклатуры varchar(50)
			,КоэффициентХарактеристики Numeric(20, 10)
			,КоэффициентТТ Numeric(20, 10)
			,Коэффициент Numeric(20, 10)
			)

		DROP TABLE IF EXISTS #КоличествоРазмеровДляНоменклатуры
		CREATE TABLE #КоличествоРазмеровДляНоменклатуры(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,КоличествоРазмеров Numeric(10)
			)

		DROP TABLE IF EXISTS #КоэффициентыРазмеровДляНоменклатуры
		CREATE TABLE #КоэффициентыРазмеровДляНоменклатуры(
			Кластер varchar(50)
			,ТорговаяТочка varchar(50)
			,Номенклатура varchar(50)
			,Количество numeric(10)
			,КоличествоРазмеров numeric(10)
			,Коэффициент numeric(20, 10)
			)

		DROP TABLE IF EXISTS #КоличествоТорговыхТочекДляХарактеристики
		CREATE TABLE #КоличествоТорговыхТочекДляХарактеристики(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,КоличествоТТ numeric(10)
			)

		DROP TABLE IF EXISTS #КоэффициентыТорговыхТочекДляХарактеристики
		CREATE TABLE #КоэффициентыТорговыхТочекДляХарактеристики(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,ХарактеристикаНоменклатуры varchar(50)
			,Количество numeric(10)
			,КоличествоТТ numeric(10)
			,Коэффициент numeric(20, 10)
			)

		DROP TABLE IF EXISTS #ЧерновикРейтингаРазмеров
		CREATE TABLE #ЧерновикРейтингаРазмеров(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,Батч varchar(50)
			,РейтингБатча bigint
			,ХарактеристикаНоменклатуры varchar(50)
			,КлассСовместимостиРазмеров numeric(3)
			,Рейтинг bigint
			,РейтингКНДП bigint
			,СтопЛист binary(1)
			)

		DROP TABLE IF EXISTS #РейтингРазмеров
		CREATE TABLE #РейтингРазмеров(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,Батч varchar(50)
			,РейтингБатча bigint
			,ХарактеристикаНоменклатуры varchar(50)
			,РейтингКНДП bigint
			)

		DROP TABLE IF EXISTS #РейтингКлассовСовместимостиРазмеров
		CREATE TABLE #РейтингКлассовСовместимостиРазмеров(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,Батч varchar(50)
			,КлассСовместимостиРазмеров numeric(3)
			,РейтингКСР bigint
			)

		DROP TABLE IF EXISTS #СледующийРейтинг
		CREATE TABLE #СледующийРейтинг(
			Кластер varchar(50)
			,Номенклатура varchar(50)
			,Батч varchar(50)
			,Рейтинг bigint
			)
	-- Дополнительные вспомогательные таблицы
	END

	BEGIN -- Ограничения для точечного анализа

		DECLARE @ВыбНоменклатура TABLE(
								Номенклатура varchar(50)
								)		

		INSERT INTO @ВыбНоменклатура
		SELECT 'К132' AS Номенклатура
		UNION ALL
		SELECT 'Т142' AS Номенклатура
		UNION ALL
		SELECT 'СР71' AS Номенклатура
		UNION ALL
		SELECT 'Л422' AS Номенклатура
		UNION ALL
		SELECT 'ИТ15' AS Номенклатура


		DECLARE @ВыбКластерДляПодсортировки TABLE(
								Кластер varchar(50)
								)		

		INSERT INTO @ВыбКластерДляПодсортировки
		SELECT 'Часы Кластер 4' AS Кластер

		DECLARE @Отладка_Ограничивать_По_ТТ binary(1) = 0x01
		DECLARE @ВыбТорговаяТочка TABLE(
								ТТ varchar(50)
								)		
		INSERT INTO @ВыбТорговаяТочка
		SELECT 'Калуга,21 век,секция 2' AS ТТ
	
		IF (SELECT COUNT(*) FROM @ВыбТорговаяТочка) > 0
			SET @Отладка_Ограничивать_По_ТТ = 0x01
		ELSE
			SET @Отладка_Ограничивать_По_ТТ = 0x00
	END
	
	/* Настройка временных таблиц. Конец. */
END 

BEGIN /* Заполнение тестовых данных */

	INSERT INTO #ОстаткиТТ_СХарактеристиками(ТорговаяТочка, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры, Количество)
	SELECT 
		'Химки,Мега,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Химки,Мега,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Химки,Мега,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Москва,Европейский,секция' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,2 AS Количество 
	UNION ALL
	SELECT 
		'Москва,Европейский,секция' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'СПб,Академ Парк,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'СПб,Академ Парк,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'20' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'СПб,Академ Парк,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'ИТ15' AS Номенклатура
		,'15' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'СПб,Академ Парк,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'ИТ15' AS Номенклатура
		,'15,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'СПб,Академ Парк,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'ИТ15' AS Номенклатура
		,'16' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'СПб,Академ Парк,секция 2' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'ИТ15' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Тюмень,Сити Молл,секция 3' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'17' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Тюмень,Сити Молл,секция 3' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Тюмень,Сити Молл,секция 3' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'15,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Тюмень,Сити Молл,секция 3' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	UNION ALL
	SELECT 
		'Тюмень,Сити Молл,секция 3' AS ТорговаяТочка
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'21,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество 
	CREATE INDEX IDX ON #ОстаткиТТ_СХарактеристиками(ТорговаяТочка, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры)
	
	TRUNCATE TABLE #ОстаткиТТ_СХарактеристиками

	INSERT INTO #ОстаткиТТ(ТорговаяТочка, КластерДляПодсортировки, Номенклатура, Количество)
	SELECT
		ОТ.ТорговаяТочка AS ТорговаяТочка
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,ОТ.Номенклатура AS Номенклатура
		,SUM(ОТ.Количество) AS Количество
	FROM
		#ОстаткиТТ_СХарактеристиками AS ОТ
	GROUP BY
		ОТ.ТорговаяТочка
		,ОТ.КластерДляПодсортировки
		,ОТ.Номенклатура
	CREATE INDEX IDX ON #ОстаткиТТ(ТорговаяТочка, КластерДляПодсортировки, Номенклатура)
	
	/*
	INSERT INTO #ОстаткиСклада_СХарактеристиками(НомерСтроки, Склад, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры, Количество)
	SELECT
		ROW_NUMBER() OVER (ORDER BY ОТ.Склад, ОТ.КластерДляПодсортировки, ОТ.Номенклатура) AS НомерСтроки
		,ОТ.Склад AS Склад
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,ОТ.Номенклатура AS Номенклатура
		,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
		,ОТ.Количество AS Количество
	FROM
		(
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'ИТ15' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,1 AS Количество		
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'ИТ15' AS Номенклатура
		,'21' AS ХарактеристикаНоменклатуры
		,1 AS Количество		
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'17,5' AS ХарактеристикаНоменклатуры
		,2 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,2 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'20' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'22' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Л422' AS Номенклатура
		,'15,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Л422' AS Номенклатура
		,'17,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'СР71' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,3 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'СР71' AS Номенклатура
		,'17' AS ХарактеристикаНоменклатуры
		,4 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'СР71' AS Номенклатура
		,'17,5' AS ХарактеристикаНоменклатуры
		,5 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'СР71' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,4 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'СР71' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,3 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'СР71' AS Номенклатура
		,'19,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'15,5' AS ХарактеристикаНоменклатуры
		,1 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'16' AS ХарактеристикаНоменклатуры
		,1 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,4 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'17,5' AS ХарактеристикаНоменклатуры
		,5 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,5 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,3 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,2 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'19,5' AS ХарактеристикаНоменклатуры
		,2 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'20' AS ХарактеристикаНоменклатуры
		,1 AS Количество		
		
		UNION ALL
		
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'Т142' AS Номенклатура
		,'21' AS ХарактеристикаНоменклатуры
		,1 AS Количество		

		) AS ОТ
	CREATE INDEX IDX ON #ОстаткиСклада_СХарактеристиками(Склад, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры)
	*/
	
	-- Пример Кристины от 04.02.2022
	INSERT INTO #ОстаткиСклада_СХарактеристиками(НомерСтроки, Склад, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры, Количество)
	SELECT
		ROW_NUMBER() OVER (ORDER BY ОТ.Склад, ОТ.КластерДляПодсортировки, ОТ.Номенклатура) AS НомерСтроки
		,ОТ.Склад AS Склад
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,ОТ.Номенклатура AS Номенклатура
		,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
		,ОТ.Количество AS Количество
	FROM
		(
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'15' AS ХарактеристикаНоменклатуры
		,2 AS Количество

		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'15,5' AS ХарактеристикаНоменклатуры
		,3 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'16' AS ХарактеристикаНоменклатуры
		,8 AS Количество

		UNION ALL
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,9 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'17' AS ХарактеристикаНоменклатуры
		,16 AS Количество

		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'17,5' AS ХарактеристикаНоменклатуры
		,17 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,9 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,13 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19,5' AS ХарактеристикаНоменклатуры
		,13 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'20' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'20,5' AS ХарактеристикаНоменклатуры
		,9 AS Количество

		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'21' AS ХарактеристикаНоменклатуры
		,6 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'21,5' AS ХарактеристикаНоменклатуры
		,3 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'22' AS ХарактеристикаНоменклатуры
		,2 AS Количество
	
		) AS ОТ
	
	/*
	TRUNCATE TABLE #ОстаткиСклада_СХарактеристиками
	INSERT INTO #ОстаткиСклада_СХарактеристиками(НомерСтроки, Склад, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры, Количество)
	SELECT
		ROW_NUMBER() OVER (ORDER BY ОТ.Склад, ОТ.КластерДляПодсортировки, ОТ.Номенклатура) AS НомерСтроки
		,ОТ.Склад AS Склад
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,ОТ.Номенклатура AS Номенклатура
		,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
		,ОТ.Количество AS Количество
	FROM
		(
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'15' AS ХарактеристикаНоменклатуры
		,0 AS Количество

		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'15,5' AS ХарактеристикаНоменклатуры
		,0 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'16' AS ХарактеристикаНоменклатуры
		,11 AS Количество

		UNION ALL
		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'16,5' AS ХарактеристикаНоменклатуры
		,11 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'17' AS ХарактеристикаНоменклатуры
		,11 AS Количество

		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'17,5' AS ХарактеристикаНоменклатуры
		,11 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'18,5' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'19,5' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'20' AS ХарактеристикаНоменклатуры
		,10 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'20,5' AS ХарактеристикаНоменклатуры
		,10 AS Количество

		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'21' AS ХарактеристикаНоменклатуры
		,0 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'21,5' AS ХарактеристикаНоменклатуры
		,0 AS Количество
		
		UNION ALL

		SELECT
		'Основной' AS Склад
		,'Часы Кластер 4' AS КластерДляПодсортировки
		,'К132' AS Номенклатура
		,'22' AS ХарактеристикаНоменклатуры
		,0 AS Количество
	
		) AS ОТ
		*/
	CREATE INDEX IDX ON #ОстаткиСклада_СХарактеристиками(Склад, КластерДляПодсортировки, Номенклатура, ХарактеристикаНоменклатуры)

	INSERT INTO #ОстаткиСклада(НомерСтроки, Склад, КластерДляПодсортировки, Номенклатура, Количество)
	SELECT
		ROW_NUMBER() OVER (ORDER BY ОТ.Склад, ОТ.КластерДляПодсортировки, ОТ.Номенклатура) 
		,ОТ.Склад AS ТорговаяТочка
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,ОТ.Номенклатура AS Номенклатура
		,SUM(ОТ.Количество) AS Количество
	FROM
		#ОстаткиСклада_СХарактеристиками AS ОТ
	GROUP BY
		ОТ.Склад
		,ОТ.КластерДляПодсортировки
		,ОТ.Номенклатура
	CREATE INDEX IDX ON #ОстаткиСклада(Склад, КластерДляПодсортировки, Номенклатура)

	INSERT INTO #Потребность(НомерСтроки, ТорговаяТочка, КластерДляПодсортировки, Количество, Подтверждено)
	SELECT
		ROW_NUMBER() OVER (ORDER BY ОТ.КластерДляПодсортировки) AS НомерСтроки
		,ОТ.ТорговаяТочка AS ТорговаяТочка
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,ОТ.Количество AS Количество
		,ОТ.Подтверждено AS Подтверждено
	FROM
		(SELECT
			'Зеленоград,Иридиум,остров 2' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,15 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT 
			'Иркутск,Сильвер Молл,секция 3' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,12 AS Количество 
			,0 AS Подтверждено
		UNION ALL
		SELECT 
			'Казань,Южный,секция 2' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,8 AS Количество 
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Калуга,21 век,секция 2' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,4 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Москва,Европейский,секция' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,25 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Москва,Речной,секция 3' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,20 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Норильск,Стрит Ленинский,секция' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,4 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'СПб,Академ Парк,секция 2' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,10 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Тюмень,Сити Молл,секция 3' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,8 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Химки,Мега,секция 2' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,18 AS Количество
			,0 AS Подтверждено
		UNION ALL
		SELECT
			'Челябинск,Родник,секция 2' AS ТорговаяТочка
			,'Часы Кластер 4' AS КластерДляПодсортировки
			,6 AS Количество
			,0 AS Подтверждено
		) AS ОТ
	CREATE INDEX IDX ON #Потребность(ТорговаяТочка, КластерДляПодсортировки)
	
	/*
	SELECT '#ОстаткиТТ_СХарактеристиками' AS '#ОстаткиТТ_СХарактеристиками'
	SELECT
		ОТ.КластерДляПодсортировки AS Кластер
		,ОТ.ТорговаяТочка AS ТорговаяТочка
		,ОТ.Номенклатура AS Номенклатура
		,SUM(ОТ.Количество) AS Количество
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Количество ELSE 0 END) AS '15'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Количество ELSE 0 END) AS '15,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Количество ELSE 0 END) AS '16'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Количество ELSE 0 END) AS '16,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Количество ELSE 0 END) AS '17'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Количество ELSE 0 END) AS '17,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Количество ELSE 0 END) AS '18'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Количество ELSE 0 END) AS '18,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Количество ELSE 0 END) AS '19'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Количество ELSE 0 END) AS '19,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Количество ELSE 0 END) AS '20'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Количество ELSE 0 END) AS '20,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Количество ELSE 0 END) AS '21'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Количество ELSE 0 END) AS '21,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Количество ELSE 0 END) AS '22'
	FROM #ОстаткиТТ_СХарактеристиками AS ОТ
	GROUP BY
		ОТ.КластерДляПодсортировки
		,ОТ.ТорговаяТочка
		,ОТ.Номенклатура
	*/

	--SELECT '#ОстаткиТТ' AS '#ОстаткиТТ'
	--SELECT * FROM #ОстаткиТТ AS ОТ
	--RETURN
	

	/*
	SELECT '#ОстаткиСклада_СХарактеристиками' AS '#ОстаткиСклада_СХарактеристиками'
	SELECT
		ОТ.КластерДляПодсортировки AS Кластер
		,ОТ.Склад AS Склад
		,ОТ.Номенклатура AS Номенклатура
		,SUM(ОТ.Количество) AS Количество
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Количество ELSE 0 END) AS '15'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Количество ELSE 0 END) AS '15,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Количество ELSE 0 END) AS '16'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Количество ELSE 0 END) AS '16,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Количество ELSE 0 END) AS '17'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Количество ELSE 0 END) AS '17,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Количество ELSE 0 END) AS '18'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Количество ELSE 0 END) AS '18,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Количество ELSE 0 END) AS '19'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Количество ELSE 0 END) AS '19,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Количество ELSE 0 END) AS '20'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Количество ELSE 0 END) AS '20,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Количество ELSE 0 END) AS '21'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Количество ELSE 0 END) AS '21,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Количество ELSE 0 END) AS '22'
	FROM #ОстаткиСклада_СХарактеристиками AS ОТ
	GROUP BY
		ОТ.КластерДляПодсортировки
		,ОТ.Склад
		,ОТ.Номенклатура
	*/
	--SELECT '#ОстаткиСклада' AS '#ОстаткиСклада'
	--SELECT * FROM #ОстаткиСклада AS ОТ
	--RETURN
	
	--SELECT '#Потребность' AS '#Потребность'
	--SELECT * FROM #Потребность AS ОТ
	
	/* Заполнение тестовых данных. Конец. */
END 

BEGIN /* Заполнение вспомогательных данных. */

		/* Таблица номеров 1...1000 которая поможет в будущем разбивать количества на единичные значения*/
		DECLARE @ТаблицаНомеров TABLE(Номер numeric(4))

		INSERT INTO @ТаблицаНомеров(Номер)
		SELECT ROW_NUMBER() OVER (ORDER BY N1.NewVal) 
		FROM (VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10)) N1(NewVal)
		CROSS JOIN (VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10)) N2(NewVal)
		CROSS JOIN (VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10)) N3(NewVal)

		-- Таблица которая хранит тройки размеров, которые не должны быть рядом. Если это возможно.
		-- Т.е. чтобы было распределение хотя-бы через размер
		DROP TABLE IF EXISTS #МаскаИсключений
		CREATE TABLE #МаскаИсключений(
			Лево varchar(50)
			,Центр varchar(50)
			,Право varchar(50)
			)
		
		-- Таблица которая хранит разбиение размеров по подгруппам (батчам).
		-- В каждую подгруппу объединяются однотипные (по какому-либо критерию) размеры. 
		-- Изначально будет использоваться для объединения всех основных размеров 16-20,5 в одну группу и они будут распределяться в первую очередь
		-- а во вторую группу попадут редкоиспользуемые остальные размеры. Либо слишком маленькие, либо слишком большие. Они будут распределяться
		-- после того, как распределились остальные.
		-- Так же это разбиение планируется использовать для разделения мужских и женских обручальных колец.
		DROP TABLE IF EXISTS #БатчиРазмеров
		CREATE TABLE #БатчиРазмеров(
			Размер varchar(50)
			,Батч varchar(50)
			,КлассСовместимостиРазмеров numeric(3)
			)

		DROP TABLE IF EXISTS #ПорядокБатчейРазмеров
		CREATE TABLE #ПорядокБатчейРазмеров(
			Батч varchar(50)
			,Порядок numeric(3)
			,ПорядокСортировкиТТ int
			,РаспределятьПолностью numeric(1)
			)

	
		INSERT INTO #МаскаИсключений(Лево, Центр, Право)
		SELECT
			NULL AS Лево
			,'15' AS Центр
			,'15,5' AS Право
		UNION ALL
		SELECT
			'15' AS Лево
			,'15,5' AS Центр
			,'16' AS Право
		UNION ALL
		SELECT
			'15,5' AS Лево
			,'16' AS Центр
			,'16,5' AS Право
		UNION ALL
		SELECT
			'16' AS Лево
			,'16,5' AS Центр
			,'17' AS Право
		UNION ALL
		SELECT
			'16,5' AS Лево
			,'17' AS Центр
			,'17,5' AS Право
		UNION ALL
		SELECT
			'17' AS Лево
			,'17,5' AS Центр
			,'18' AS Право
		UNION ALL
		SELECT
			'17,5' AS Лево
			,'18' AS Центр
			,'18,5' AS Право
		UNION ALL
		SELECT
			'18' AS Лево
			,'18,5' AS Центр
			,'19' AS Право
		UNION ALL
		SELECT
			'18,5' AS Лево
			,'19' AS Центр
			,'19,5' AS Право
		UNION ALL
		SELECT
			'19' AS Лево
			,'19,5' AS Центр
			,'20' AS Право
		UNION ALL
		SELECT
			'19,5' AS Лево
			,'20' AS Центр
			,'20,5' AS Право
		UNION ALL
		SELECT
			'20' AS Лево
			,'20,5' AS Центр
			,'21' AS Право
		UNION ALL
		SELECT
			'20,5' AS Лево
			,'21' AS Центр
			,'21,5' AS Право
		UNION ALL
		SELECT
			'21' AS Лево
			,'21,5' AS Центр
			,'22' AS Право
		UNION ALL
		SELECT
			'21,5' AS Лево
			,'22' AS Центр
			,NULL AS Право
		
		CREATE INDEX IDX ON #МаскаИсключений(Центр, Лево, Право)
		CREATE INDEX IX_1 on #МаскаИсключений(Лево, Центр)
		CREATE INDEX IX_2 on #МаскаИсключений(Право, Центр)

		INSERT INTO #ПорядокБатчейРазмеров(Батч, Порядок, ПорядокСортировкиТТ, РаспределятьПолностью)
		SELECT
			'Батч 1' AS Батч
			,2 AS Порядок
			,1 AS ПорядокСортировкиТТ
			,1 AS РаспределятьПолностью
		UNION ALL
		SELECT
			'Батч 2' AS Батч
			,1 AS Порядок
			,-1 AS ПорядокСортировкиТТ
			,1 AS РаспределятьПолностью

		CREATE INDEX IDX ON #ПорядокБатчейРазмеров(Батч, Порядок)
		
		INSERT INTO #БатчиРазмеров(Батч, Размер, КлассСовместимостиРазмеров)
		SELECT
			'Батч 2' AS Батч
			,'15' AS Размер
			,1 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 2' AS Батч
			,'15,5' AS Размер
			,2 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'16' AS Размер
			,3 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'16,5' AS Размер
			,4 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'17' AS Размер
			,3 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'17,5' AS Размер
			,4 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'18' AS Размер
			,3 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'18,5' AS Размер
			,4 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'19' AS Размер
			,3 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'19,5' AS Размер
			,4 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'20' AS Размер
			,3 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 1' AS Батч
			,'20,5' AS Размер
			,4 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 2' AS Батч
			,'21' AS Размер
			,2 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 2' AS Батч
			,'21,5' AS Размер
			,1 AS КлассСовместимостиРазмеров
		UNION ALL
		SELECT
			'Батч 2' AS Батч
			,'22' AS Размер
			,2 AS КлассСовместимостиРазмеров
		CREATE INDEX IDX ON #БатчиРазмеров(Батч, КлассСовместимостиРазмеров, Размер)
		
		/*Батчи для "обручалки"*/
		
		IF 1=1
		BEGIN
			TRUNCATE TABLE #ПорядокБатчейРазмеров

			INSERT INTO #ПорядокБатчейРазмеров(Батч, Порядок, ПорядокСортировкиТТ, РаспределятьПолностью)
			SELECT
				'Батч Бэд' AS Батч
				,1 AS Порядок
				,-1 AS ПорядокСортировкиТТ
				,1 AS РаспределятьПолностью
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,2 AS Порядок
				,1 AS ПорядокСортировкиТТ
				,0 AS РаспределятьПолностью
			UNION ALL
			SELECT
				'Батч 2' AS Батч
				,3 AS Порядок
				,1 AS ПорядокСортировкиТТ
				,1 AS РаспределятьПолностью
		
			TRUNCATE TABLE #БатчиРазмеров

			INSERT INTO #БатчиРазмеров(Батч, Размер, КлассСовместимостиРазмеров)
			SELECT
				'Батч Бэд' AS Батч
				,'15' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч Бэд' AS Батч
				,'15,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,'16' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,'16,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,'17' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,'17,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,'18' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 1' AS Батч
				,'18,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 2' AS Батч
				,'19' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 2' AS Батч
				,'19,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 2' AS Батч
				,'20' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 2' AS Батч
				,'20,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч 2' AS Батч
				,'21' AS Размер
				,1 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч Бэд' AS Батч
				,'21,5' AS Размер
				,2 AS КлассСовместимостиРазмеров
			UNION ALL
			SELECT
				'Батч Бэд' AS Батч
				,'22' AS Размер
				,1 AS КлассСовместимостиРазмеров

		/*Обручалка*/
		END

	/* Заполнение вспомогательных данных. Конец. */
END 

BEGIN /* Основной код процедуры */
	

	--SELECT * FROM #ОстаткиТТ AS ОТ

	--SELECT '#Потребность' AS '#Потребность'
	--SELECT * FROM #Потребность AS ОТ

	--SELECT '#ОстаткиСклада' AS '#ОстаткиСклада'
	--SELECT * FROM #ОстаткиСклада AS ОТ

	--SELECT '#ОстаткиСклада_СХарактеристиками' AS '#ОстаткиСклада_СХарактеристиками'
	--SELECT * FROM #ОстаткиСклада_СХарактеристиками AS ОТ

	/*
	SELECT
		ОТ.КластерДляПодсортировки AS Кластер
		,ОТ.Номенклатура AS Номенклатура
		,SUM(ОТ.Количество) AS Количество
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Количество ELSE 0 END) AS '15'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Количество ELSE 0 END) AS '15,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Количество ELSE 0 END) AS '16'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Количество ELSE 0 END) AS '16,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Количество ELSE 0 END) AS '17'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Количество ELSE 0 END) AS '17,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Количество ELSE 0 END) AS '18'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Количество ELSE 0 END) AS '18,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Количество ELSE 0 END) AS '19'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Количество ELSE 0 END) AS '19,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Количество ELSE 0 END) AS '20'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Количество ELSE 0 END) AS '20,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Количество ELSE 0 END) AS '21'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Количество ELSE 0 END) AS '21,5'
		,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Количество ELSE 0 END) AS '22'
	FROM #ОстаткиСклада AS ОТ
	GROUP BY
		ОТ.КластерДляПодсортировки
		,ОТ.Номенклатура
	*/
	--RETURN

	/*;WITH ПредМаксОстаток
	AS 
	(
		SELECT
			ОТ.ТорговаяТочка AS ТорговаяТочка
			,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
			,ОТ.Номенклатура AS Номенклатура
			,SUM(ОТ.Количество) AS Количество
		FROM #ОстаткиТТ AS ОТ WITH(NOLOCK)
		GROUP BY
			ОТ.ТорговаяТочка
			,ОТ.КластерДляПодсортировки
			,ОТ.Номенклатура
	)*/
	
	INSERT INTO #МаксимальныеОстаткиТТ(ТорговаяТочка, КластерДляПодсортировки, Номенклатура, Количество)
	SELECT
		ОТ.ТорговаяТочка AS ТорговаяТочка
		,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
		,MAX(ОТ.Номенклатура) AS Номенклатура
		,MAX(ВТ.Количество) AS Количество
	FROM #ОстаткиТТ AS ОТ WITH(NOLOCK)
	LEFT JOIN (SELECT
					ОТ.ТорговаяТочка AS ТорговаяТочка
					,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
					,MAX(ОТ.Количество) AS Количество
				FROM #ОстаткиТТ AS ОТ WITH(NOLOCK)
				GROUP BY
					ОТ.ТорговаяТочка
					,ОТ.КластерДляПодсортировки
				) AS ВТ
	ON ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
		AND ОТ.КластерДляПодсортировки = ВТ.КластерДляПодсортировки
		--AND ОТ.Номенклатура = ВТ.Номенклатура
		AND ОТ.Количество = ВТ.Количество
	WHERE ВТ.Количество IS NOT NULL
	GROUP BY
		ОТ.ТорговаяТочка
		,ОТ.КластерДляПодсортировки

	--SELECT '#МаксимальныеОстаткиТТ' AS '#МаксимальныеОстаткиТТ'
	--SELECT * FROM #МаксимальныеОстаткиТТ

		BEGIN /*Первая фаза. 
				Сравнение потребности и возможности заполнения со склада по каждому кластеру. 
				Попутно получпется "оптимальное" распределение.
				Говоря умными словами: "Приводим транспортную задачу линейного программирования к закрытому (сбалансированному) виду."*/

			DROP TABLE IF EXISTS #Спрос_I
			CREATE TABLE #Спрос_I(
				НомерСТП bigint -- Номер строки таблицы Потребности
				,ТорговаяТочка varchar(50)
				,КластерДляПодсортировки varchar(50)
				,КоличествоСТП numeric(10)
				,МестоВнутриСТП bigint
				,Количество numeric(10) -- В концепции этого алгоритма данное значение должно быть равно 1.
				,ПорядокСоединения bigint
				)

			DROP TABLE IF EXISTS #Предложение_I
			CREATE TABLE #Предложение_I(
				КластерДляПодсортировки varchar(50)
				,Количество numeric(10) -- В концепции этого алгоритма данное значение должно быть равно 1.
				,ПорядокСоединения bigint
				)

			DROP TABLE IF EXISTS #ФазаРаспределения_I
			CREATE TABLE #ФазаРаспределения_I(
				НомерСТП bigint
				,ТорговаяТочка varchar(50)
				,КластерДляПодсортировки varchar(50)
				,Номенклатура varchar(50)
				,КоличествоСТП Numeric(10)
				,МестоВнутриСТП bigint
				,КоличествоСпроса Numeric(10)
				,ПорядокСоединенияСпроса bigint 
				,НомерСТОС bigint
				,ПорядокСоединенияПредложения bigint
				)

			INSERT INTO #Спрос_I(НомерСТП, КластерДляПодсортировки, ТорговаяТочка, КоличествоСТП,
							   МестоВнутриСТП, Количество, ПорядокСоединения)
			SELECT 
				ТП.НомерСтроки AS НомерСТП
				,ТП.КластерДляПодсортировки AS КластерДляПодсортировки
				,ТП.ТорговаяТочка AS ТорговаяТочка
				,ТП.Количество AS КоличествоСТП
				,ВТ_2.Номер AS МестоВнутриСТП
				,1 AS Количество
				,ROW_NUMBER() OVER(PARTITION BY ТП.КластерДляПодсортировки ORDER BY ТП.КластерДляПодсортировки, ВТ_2.Номер, ТП.Количество DESC, ТП.ТорговаяТочка) AS ПорядокСоединения
			FROM #Потребность AS ТП
			LEFT JOIN #МаксимальныеОстаткиТТ AS ВТ_1 WITH(NOLOCK)
				ON ТП.КластерДляПодсортировки = ВТ_1.КластерДляПодсортировки
				AND ТП.ТорговаяТочка = ВТ_1.ТорговаяТочка
			LEFT JOIN @ТаблицаНомеров AS ВТ_2
				ON ТП.Количество >= ВТ_2.Номер
			ORDER BY
				ТП.КластерДляПодсортировки
				,ВТ_2.Номер
				,ТП.ТорговаяТочка
				,ТП.Количество
		
			--SELECT '#Спрос_I' AS '#Спрос_I'
			--SELECT * FROM #Спрос_I AS ОТ
			--RETURN

			INSERT INTO #Предложение_I(КластерДляПодсортировки, Количество, ПорядокСоединения)
			SELECT 
				ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
				,1 AS Количество
				,ВТ_1.Номер AS ПорядокСоединения
			FROM 
				(SELECT
					ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
					,SUM(ОТ.Количество) AS Количество
				FROM #ОстаткиСклада AS ОТ WITH(NOLOCK)
				GROUP BY
					ОТ.КластерДляПодсортировки
				) AS ОТ
			LEFT JOIN @ТаблицаНомеров AS ВТ_1
				ON ОТ.Количество >= ВТ_1.Номер
			ORDER BY
				ОТ.КластерДляПодсортировки
				,ВТ_1.Номер

			--SELECT '#Предложение_I' AS '#Предложение_I'
			--SELECT * FROM #Предложение_I AS ОТ
			--RETURN

			INSERT INTO #ФазаРаспределения_I (НомерСТП, ТорговаяТочка, КластерДляПодсортировки, КоличествоСТП,
							  				  МестоВнутриСТП, КоличествоСпроса, ПорядокСоединенияСпроса, ПорядокСоединенияПредложения)
			SELECT 
				ОТ.НомерСТП AS НомерСТП
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,ОТ.КластерДляПодсортировки AS КластерДляПодсортировки
				,ОТ.КоличествоСТП AS КоличествоСТП
				,ОТ.МестоВнутриСТП AS МестоВнутриСТП
				,ОТ.Количество AS КоличествоСпроса
				,ОТ.ПорядокСоединения AS ПорядокСоединенияСпроса 
				,ВТ.ПорядокСоединения AS ПорядокСоединенияПредложения
			FROM #Спрос_I AS ОТ WITH(NOLOCK)
			LEFT JOIN #Предложение_I AS ВТ WITH(NOLOCK)
				ON ОТ.КластерДляПодсортировки = ВТ.КластерДляПодсортировки
				--AND ОТ.Номенклатура = ВТ.Номенклатура
				AND ОТ.ПорядокСоединения = ВТ.ПорядокСоединения
	 
			UPDATE ОТ
			SET
				ОТ.Подтверждено = CASE WHEN ВТ_1.Количество < ОТ.Количество THEN ВТ_1.Количество ELSE ОТ.Количество END
			FROM #Потребность AS ОТ
			LEFT JOIN (
				SELECT 
					ОТ.КластерДляПодсортировки AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					,ОТ.КоличествоСТП AS КоличествоСпроса
					,COUNT(ОТ.ПорядокСоединенияПредложения) AS Количество
				FROM #ФазаРаспределения_I AS ОТ WITH(NOLOCK)
				GROUP BY
					ОТ.КластерДляПодсортировки
					,ОТ.ТорговаяТочка
					,ОТ.КоличествоСТП
					) AS ВТ_1
				ON ОТ.КластерДляПодсортировки = ВТ_1.Кластер
				AND ОТ.ТорговаяТочка = ВТ_1.ТорговаяТочка

			/*
			SELECT '#Потребность по кластеру' AS '#Потребность по кластеру'
			SELECT
				СК.Наименование AS ТорговаяТочка
				,СКП.Наименование AS КластерДляПодсортировки
				,ОТ.Количество AS Количество
				,ОТ.Подтверждено AS Подтверждено
			FROM #Потребность AS ОТ
			INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
				ON ОТ.КластерДляПодсортировки = ОГ_Т_3.Кластер
			/*
			INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
				ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
				OR @Отладка_Ограничивать_По_ТТ = 0x00
			*/
			LEFT JOIN Справочник_Контрагенты AS СК
				ON ОТ.ТорговаяТочка = СК.Ссылка	
			LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
				ON ОТ.КластерДляПодсортировки = СКП.Ссылка

			SELECT '#Потребность' AS '#Потребность'
			SELECT
				СК.Наименование AS ТорговаяТочка
				,СКП.Наименование AS КластерДляПодсортировки
				,ОТ.Количество AS Количество
				,ОТ.Подтверждено AS Подтверждено
			FROM #Потребность AS ОТ
			INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
				ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
				OR @Отладка_Ограничивать_По_ТТ = 0x00
			LEFT JOIN Справочник_Контрагенты AS СК
				ON ОТ.ТорговаяТочка = СК.Ссылка	
			LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
				ON ОТ.КластерДляПодсортировки = СКП.Ссылка
			
			SELECT 
				SUM(ОТ.Количество) AS Количество
				,SUM(ОТ.Подтверждено) AS Подтверждено
			FROM #Потребность AS ОТ
			*/

		/*Первая фаза. Сравнение потребности и возможности заполнения со склада по каждому кластеру. Конец.*/
		END

		BEGIN /*Вторая фаза. 
				Формирование кросс таблицы "стоимости перевозок" для транспортной задачи линейного программирования.*/

			DROP TABLE IF EXISTS #ПредварительнаяТаблицаСтоимостейДоставки
			CREATE TABLE #ПредварительнаяТаблицаСтоимостейДоставки(
				Кластер varchar(50)
				,ТорговаяТочка varchar(50)
				,Номенклатура varchar(50)
				,Количество numeric(10)
				,СтоимостьПеревозки numeric(10)
				)

			DECLARE @СтоимостьОбынойДоставки TABLE(Кластер varchar(50)
													,СтоимостьПеревозки numeric(10))

			INSERT INTO #ПредварительнаяТаблицаСтоимостейДоставки(Кластер, ТорговаяТочка, Номенклатура, Количество, СтоимостьПеревозки)
			SELECT
				ОТ_П.КластерДляПодсортировки AS Кластер
				,ОТ_П.ТорговаяТочка AS ТорговаяТочка
				,ОТ_ОС.Номенклатура AS Номенклатура
				,ISNULL(ОТ_ОТТ.Количество, 0) AS Количество
				,ROW_NUMBER() OVER (PARTITION BY ОТ_П.КластерДляПодсортировки, ОТ_П.ТорговаяТочка ORDER BY ISNULL(ОТ_ОТТ.Количество, 0) DESC) AS СтоимостьПеревозки
			FROM #Потребность AS ОТ_П
			FULL JOIN #ОстаткиСклада AS ОТ_ОС
				ON ОТ_П.КластерДляПодсортировки = ОТ_ОС.КластерДляПодсортировки
			LEFT JOIN #ОстаткиТТ AS ОТ_ОТТ
				ON ОТ_ОС.КластерДляПодсортировки = ОТ_ОТТ.КластерДляПодсортировки
				AND ОТ_ОС.Номенклатура = ОТ_ОТТ.Номенклатура
				AND ОТ_П.ТорговаяТочка = ОТ_ОТТ.ТорговаяТочка
			ORDER BY
				ОТ_П.КластерДляПодсортировки
				,ОТ_П.ТорговаяТочка
				,ISNULL(ОТ_ОТТ.Количество, 0) DESC 
	
			INSERT INTO @СтоимостьОбынойДоставки (Кластер, СтоимостьПеревозки)
			SELECT
				ОТ.Кластер AS Кластер
				,MAX(ОТ.СтоимостьПеревозки) AS СтоимостьПеревозки
			FROM
				(SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					,MIN(ОТ.СтоимостьПеревозки) AS СтоимостьПеревозки
				FROM #ПредварительнаяТаблицаСтоимостейДоставки AS ОТ
				WHERE 
					ОТ.Количество = 0
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка) AS ОТ
			GROUP BY
				ОТ.Кластер

			INSERT INTO #ТаблицаСтоимостейДоставки (Кластер, Номенклатура, ТорговаяТочка, СтоимостьПеревозки)
			SELECT
				ОТ.Кластер AS Кластер
				,ОТ.Номенклатура AS Номенклатура
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,ISNULL(ВТ.СтоимостьПеревозки, ОТ.СтоимостьПеревозки) AS СтоимостьПеревозки
			FROM #ПредварительнаяТаблицаСтоимостейДоставки AS ОТ
			LEFT JOIN @СтоимостьОбынойДоставки AS ВТ
				ON ОТ.Кластер = ВТ.Кластер
				AND ОТ.Количество = 0

			CREATE INDEX IDX ON #ТаблицаСтоимостейДоставки(Кластер, Номенклатура, ТорговаяТочка)

			DROP TABLE IF EXISTS #ПредварительнаяТаблицаСтоимостейПеревозок
			/*
			SELECT '#ТаблицаСтоимостейДоставки' AS '#ТаблицаСтоимостейДоставки'
			SELECT
				ОТ.Кластер AS Кластер
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,SUM(CASE WHEN ОТ.Номенклатура = 'К132' THEN ОТ.СтоимостьПеревозки ELSE 0 END) AS 'К132'
				,SUM(CASE WHEN ОТ.Номенклатура = 'Т142' THEN ОТ.СтоимостьПеревозки ELSE 0 END) AS 'Т142'
				,SUM(CASE WHEN ОТ.Номенклатура = 'СР71' THEN ОТ.СтоимостьПеревозки ELSE 0 END) AS 'СР71'
				,SUM(CASE WHEN ОТ.Номенклатура = 'Л422' THEN ОТ.СтоимостьПеревозки ELSE 0 END) AS 'Л422'
				,SUM(CASE WHEN ОТ.Номенклатура = 'ИТ15' THEN ОТ.СтоимостьПеревозки ELSE 0 END) AS 'ИТ15'
			FROM #ТаблицаСтоимостейДоставки AS ОТ
			--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
			--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
			--	OR @Отладка_Ограничивать_По_ТТ = 0x00
			--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
			--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
			--INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
			--	ON ОТ.Кластер = ОГ_Т_3.Кластер
			GROUP BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
			ORDER BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
			*/
		/*Вторая фаза. Формирование кросс таблицы "стоимости перевозок" для транспортной задачи линейного программирования.. Конец.*/
		END

		BEGIN /*Третья фаза. 
				Первоначальное распределение товаров по ТТ.
				Говоря умными словами: "Создание первого "опрного решения" транспортной задачи. Методом Аппроксимации Фогеля"*/

			BEGIN /*Временные таблицы для третьей фазы.*/
				
				DROP TABLE IF EXISTS #МаксимальнаяРазность
				CREATE TABLE #МаксимальнаяРазность (
							Кластер varchar(50)
							,ПорядокВнутриКластера bigint
							,Номенклатура varchar(50)
							,ТорговаяТочка varchar(50)
							,Разность numeric(10)
												   )
				CREATE INDEX IDX ON #МаксимальнаяРазность(Кластер, ПорядокВнутриКластера, ТорговаяТочка, Номенклатура)

				DROP TABLE IF EXISTS #МинимальнаяСтоимость
				CREATE TABLE #МинимальнаяСтоимость (
							Кластер varchar(50)
							,ПорядокВнутриКластера bigint
							,Номенклатура varchar(50)
							,ТорговаяТочка varchar(50)
							,Стоимость numeric(10)
												   )
				CREATE INDEX IDX ON #МинимальнаяСтоимость(Кластер, ПорядокВнутриКластера, ТорговаяТочка, Номенклатура)

				DROP TABLE IF EXISTS #РассчитанныеИзменения
				CREATE TABLE #РассчитанныеИзменения (
							Кластер varchar(50)
							,ПорядокВнутриКластера bigint
							,Номенклатура varchar(50)
							,ТорговаяТочка varchar(50)
							,Количество numeric(10)
												   )
				CREATE INDEX IDX ON #РассчитанныеИзменения(Кластер, ПорядокВнутриКластера, ТорговаяТочка, Номенклатура)

				DROP TABLE IF EXISTS #ОпорныйПлан
				CREATE TABLE #ОпорныйПлан(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,ТорговаяТочка varchar(50)
					,Количество numeric(10)
					)
				CREATE INDEX IDX ON #ОпорныйПлан(Кластер, ТорговаяТочка, Номенклатура)

				DROP TABLE IF EXISTS #ПотребностьНеВосполненная
				CREATE TABLE #ПотребностьНеВосполненная(
					Кластер varchar(50)
					,ТорговаяТочка varchar(50)
					,Количество numeric(10)
					)
				CREATE INDEX IDX ON #ПотребностьНеВосполненная(Кластер, ТорговаяТочка)

				DROP TABLE IF EXISTS #ОстаткиНеРаспределенные
				CREATE TABLE #ОстаткиНеРаспределенные(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,Количество numeric(10)
					)
				CREATE INDEX IDX ON #ОстаткиНеРаспределенные(Кластер, Номенклатура)

				DROP TABLE IF EXISTS #Минимум_1_ПоТТ
				CREATE TABLE #Минимум_1_ПоТТ(
					Кластер varchar(50)
					,ТорговаяТочка varchar(50)
					,Значение numeric(10)
					)
				CREATE INDEX IDX ON #Минимум_1_ПоТТ(Кластер, ТорговаяТочка, Значение)

				DROP TABLE IF EXISTS #Минимум_2_ПоТТ
				CREATE TABLE #Минимум_2_ПоТТ(
					Кластер varchar(50)
					,ТорговаяТочка varchar(50)
					,Значение numeric(10)
					)
				CREATE INDEX IDX ON #Минимум_2_ПоТТ(Кластер, ТорговаяТочка, Значение)

				DROP TABLE IF EXISTS #РазностьПоТТ
				CREATE TABLE #РазностьПоТТ(
					Кластер varchar(50)
					,ТорговаяТочка varchar(50)
					,Разность numeric(10)
					)
				CREATE INDEX IDX ON #РазностьПоТТ(Кластер, ТорговаяТочка, Разность)

				DROP TABLE IF EXISTS #Минимум_1_ПоНоменклатуре
				CREATE TABLE #Минимум_1_ПоНоменклатуре(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,Значение numeric(10)
					)
				CREATE INDEX IDX ON #Минимум_1_ПоНоменклатуре(Кластер, Номенклатура, Значение)

				DROP TABLE IF EXISTS #Минимум_2_ПоНоменклатуре
				CREATE TABLE #Минимум_2_ПоНоменклатуре(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,Значение numeric(10)
					)
				CREATE INDEX IDX ON #Минимум_2_ПоНоменклатуре(Кластер, Номенклатура, Значение)

				DROP TABLE IF EXISTS #РазностьПоНоменклатуре
				CREATE TABLE #РазностьПоНоменклатуре(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,Разность numeric(10)
					)
				CREATE INDEX IDX ON #РазностьПоНоменклатуре(Кластер, Номенклатура, Разность)

				DROP TABLE IF EXISTS #АктуальныеКластеры
				CREATE TABLE #АктуальныеКластеры(
					Кластер varchar(50)
					,Потребность numeric(10)
					)
				CREATE INDEX IDX ON #АктуальныеКластеры(Кластер)

			/*Временные таблицы для третьей фазы. Конец.*/
			END 
		
			BEGIN /*Временные вспомогательные переменные.*/

				DECLARE @ОсталосРаспределить numeric(10)

			END /*Временные вспомогательные переменные. Конец.*/

			INSERT INTO #ПотребностьНеВосполненная(Кластер, ТорговаяТочка, Количество)
			SELECT
				ОТ.КластерДляПодсортировки AS Кластер
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,ОТ.Подтверждено AS Количество
			FROM #Потребность AS ОТ
			
			/*
			SELECT '#ПотребностьНеВосполненная' AS '#ПотребностьНеВосполненная'
			SELECT
				ОТ.ТорговаяТочка AS ТорговаяТочка
				,ОТ.Кластер AS Кластер
				,ОТ.Количество AS Количество
			FROM #ПотребностьНеВосполненная AS ОТ
			--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
			--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
			--	OR @Отладка_Ограничивать_По_ТТ = 0x00
			*/

			INSERT INTO #АктуальныеКластеры(Кластер, Потребность)
			SELECT
				ОТ.Кластер AS Кластер
				,SUM(ОТ.Количество) AS Потребность
			FROM #ПотребностьНеВосполненная AS ОТ
			WHERE ОТ.Количество > 0
			GROUP BY ОТ.Кластер
			HAVING SUM(ОТ.Количество) > 0

			INSERT INTO #ОстаткиНеРаспределенные(Кластер, Номенклатура, Количество)
			SELECT
				ОТ.КластерДляПодсортировки AS Кластер
				,ОТ.Номенклатура AS ТорговаяТочка
				,ОТ.Количество AS Количество
			FROM #ОстаткиСклада AS ОТ
			INNER JOIN #АктуальныеКластеры AS ВТ
				ON ОТ.КластерДляПодсортировки = ВТ.Кластер


			INSERT INTO #ОпорныйПлан(Кластер, ТорговаяТочка, Номенклатура, Количество)
			SELECT
				ISNULL(ОТ.Кластер, ВТ.Кластер) AS Кластер
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,ВТ.Номенклатура AS Номенклатура
				,0 AS Количество
			FROM #ПотребностьНеВосполненная AS ОТ
			FULL JOIN #ОстаткиНеРаспределенные AS ВТ
				ON ОТ.Кластер = ВТ.Кластер
			
			DECLARE @ОстАВалосРаспределить numeric = -1
			DECLARE @Временная_Числовая_001 numeric

			SELECT @ОсталосРаспределить = SUM(ОТ.Количество) 
			FROM #ПотребностьНеВосполненная AS ОТ

			WHILE @ОсталосРаспределить > 0
			BEGIN
				
				--IF @ОсталосРаспределить % 100 = 0
				--	SELECT @ОсталосРаспределить AS 'Процесс Распределения'

				BEGIN /*Расчет разницы ближайших минимумов по ТТ внутри кластера.*/
			
					/*
					  1) Рачет самого минимального значения (#Минимум_1_ПоТТ) ;
					  2) Расчет минимального значения, но больше того, что рассчитаного в первом пункте. 
						 Если конечно такое возможно, и в строке остались различающиеся значения (#Минимум_2_ПоТТ).
					  3) Вычисление разницы между двумя минимальными значениями (#РазностьПоТТ)
					*/

					TRUNCATE TABLE #Минимум_1_ПоТТ
					INSERT INTO #Минимум_1_ПоТТ(Кластер, ТорговаяТочка, Значение)
					SELECT
						ОТ.Кластер
						,ОТ.ТорговаяТочка
						,MIN(ОТ.СтоимостьПеревозки) AS Значение
					FROM #ТаблицаСтоимостейДоставки AS ОТ
					INNER JOIN #ПотребностьНеВосполненная AS ВТ_1
						ON ОТ.Кластер = ВТ_1.Кластер
						AND ОТ.ТорговаяТочка = ВТ_1.ТорговаяТочка
						AND ВТ_1.Количество > 0
					INNER JOIN #ОстаткиНеРаспределенные AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.Номенклатура = ВТ_2.Номенклатура
						AND ВТ_2.Количество > 0
					INNER JOIN #АктуальныеКластеры AS ВТ_3
						ON ОТ.Кластер = ВТ_3.Кластер
					GROUP BY
						ОТ.Кластер
						,ОТ.ТорговаяТочка

					TRUNCATE TABLE #Минимум_2_ПоТТ
					INSERT INTO #Минимум_2_ПоТТ(Кластер, ТорговаяТочка, Значение)
					SELECT
						ОТ.Кластер
						,ОТ.ТорговаяТочка
						,MIN(ОТ.СтоимостьПеревозки) AS Значение
					FROM #ТаблицаСтоимостейДоставки AS ОТ
					INNER JOIN #ПотребностьНеВосполненная AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
						AND ВТ.Количество > 0
					INNER JOIN #ОстаткиНеРаспределенные AS ВТ_3
						ON ОТ.Кластер = ВТ_3.Кластер
						AND ОТ.Номенклатура = ВТ_3.Номенклатура
						AND ВТ_3.Количество > 0
					LEFT JOIN @СтоимостьОбынойДоставки AS ВТ_1
						ON ОТ.Кластер = ВТ_1.Кластер
					LEFT JOIN #Минимум_1_ПоТТ AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.ТорговаяТочка = ВТ_2.ТорговаяТочка
						AND ОТ.СтоимостьПеревозки = ВТ_2.Значение
					INNER JOIN #АктуальныеКластеры AS ВТ_4
						ON ОТ.Кластер = ВТ_4.Кластер
					WHERE ВТ_2.ТорговаяТочка IS NULL OR ВТ_1.СтоимостьПеревозки = ОТ.СтоимостьПеревозки
					GROUP BY
						ОТ.Кластер
						,ОТ.ТорговаяТочка

					TRUNCATE TABLE #РазностьПоТТ
					INSERT INTO #РазностьПоТТ (Кластер, ТорговаяТочка, Разность)
					SELECT 
						ОТ.Кластер AS Кластер
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ISNULL(ОТ.Значение, 0) - ISNULL(ВТ_2.Значение, 0)
					FROM #Минимум_2_ПоТТ AS ОТ
					INNER JOIN #Минимум_1_ПоТТ AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.ТорговаяТочка = ВТ_2.ТорговаяТочка

					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT '#РазностьПоТТ' AS '#РазностьПоТТ'
						SELECT * FROM #РазностьПоТТ
					END

				/*Расчет разницы ближайших минимумов по ТТ внутри кластера. Конец.*/
				END			

				BEGIN /*Расчет разницы ближайших минимумов по Номенклатуре внутри кластера.*/
			
					/*
					  1) Рачет самого минимального значения (#Минимум_1_ПоНоменклатуре) ;
					  2) Расчет минимального значения, но больше того, что рассчитаного в первом пункте. 
						 Если конечно такое возможно, и в строке остались различающиеся значения (#Минимум_2_ПоНоменклатуре).
					  3) Вычисление разницы между двумя минимальными значениями (#РазностьПоНоменклатуре)
					*/

					TRUNCATE TABLE #Минимум_1_ПоНоменклатуре
					INSERT INTO #Минимум_1_ПоНоменклатуре(Кластер, Номенклатура, Значение)
					SELECT
						ОТ.Кластер
						,ОТ.Номенклатура
						,MIN(ОТ.СтоимостьПеревозки) AS Значение
					FROM #ТаблицаСтоимостейДоставки AS ОТ
					INNER JOIN #ОстаткиНеРаспределенные AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ВТ.Количество > 0
					INNER JOIN #ПотребностьНеВосполненная AS ВТ_3
						ON ОТ.Кластер = ВТ_3.Кластер
						AND ОТ.ТорговаяТочка = ВТ_3.ТорговаяТочка
						AND ВТ_3.Количество > 0
					INNER JOIN #АктуальныеКластеры AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
					GROUP BY
						ОТ.Кластер
						,ОТ.Номенклатура

					TRUNCATE TABLE #Минимум_2_ПоНоменклатуре
					INSERT INTO #Минимум_2_ПоНоменклатуре(Кластер, Номенклатура, Значение)
					SELECT
						ОТ.Кластер
						,ОТ.Номенклатура
						,MIN(ОТ.СтоимостьПеревозки) AS Значение
					FROM #ТаблицаСтоимостейДоставки AS ОТ
					INNER JOIN #АктуальныеКластеры AS ОГ_1
						ON ОТ.Кластер = ОГ_1.Кластер
					INNER JOIN #ОстаткиНеРаспределенные AS ВТ_3
						ON ОТ.Кластер = ВТ_3.Кластер
						AND ОТ.Номенклатура = ВТ_3.Номенклатура
						AND ВТ_3.Количество > 0
					INNER JOIN #ПотребностьНеВосполненная AS ВТ_4
						ON ОТ.Кластер = ВТ_4.Кластер
						AND ОТ.ТорговаяТочка = ВТ_4.ТорговаяТочка
						AND ВТ_4.Количество > 0
					INNER JOIN #АктуальныеКластеры AS ВТ_5
						ON ОТ.Кластер = ВТ_5.Кластер
					LEFT JOIN @СтоимостьОбынойДоставки AS ВТ_1
						ON ОТ.Кластер = ВТ_1.Кластер
					LEFT JOIN #Минимум_1_ПоНоменклатуре AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.Номенклатура = ВТ_2.Номенклатура
						AND ОТ.СтоимостьПеревозки = ВТ_2.Значение
					WHERE ВТ_2.Номенклатура IS NULL OR ВТ_1.СтоимостьПеревозки = ОТ.СтоимостьПеревозки
					GROUP BY
						ОТ.Кластер
						,ОТ.Номенклатура

					TRUNCATE TABLE #РазностьПоНоменклатуре
					INSERT INTO #РазностьПоНоменклатуре (Кластер, Номенклатура, Разность)
					SELECT 
						ОТ.Кластер AS Кластер
						,ОТ.Номенклатура AS ТорговаяТочка
						,ISNULL(ОТ.Значение, 0) - ISNULL(ВТ_2.Значение, 0)
					FROM #Минимум_2_ПоНоменклатуре AS ОТ
					INNER JOIN #Минимум_1_ПоНоменклатуре AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.Номенклатура = ВТ_2.Номенклатура

					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT '#РазностьПоНоменклатуре' AS '#РазностьПоНоменклатуре'
						SELECT * FROM #РазностьПоТТ
					END

				/*Расчет разницы ближайших минимумов по ТТ внутри кластера. Конец.*/
				END			

				BEGIN /*Расчет максимальной разности и минимальной стоимости.*/

					TRUNCATE TABLE #МаксимальнаяРазность
					;WITH ОбъединениеРазностей
					AS 
					(
						SELECT 
							ОТ.Кластер AS Кластер
							,ОТ.ТорговаяТочка AS ТорговаяТочка
							,NULL AS Номенклатура
							,ОТ.Разность AS Разность
						FROM #РазностьПоТТ AS ОТ
						UNION ALL
						SELECT 
							ОТ.Кластер AS Кластер
							,NULL AS ТорговаяТочка
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Разность AS Разность
						FROM #РазностьПоНоменклатуре AS ОТ
					)
					INSERT INTO #МаксимальнаяРазность(Кластер, ПорядокВнутриКластера, ТорговаяТочка, Номенклатура, Разность)
					SELECT --TOP 1
						ОТ.Кластер AS Кластер
						,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер 
									ORDER BY ОТ.Разность DESC, ОТ.Номенклатура) AS ПорядокВнутриКластера
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.Разность AS Разность
					FROM ОбъединениеРазностей AS ОТ
					ORDER BY
						ОТ.Разность DESC
						,ОТ.Номенклатура

					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT '#МаксимальнаяРазность' AS '#МаксимальнаяРазность'
						SELECT * FROM #МаксимальнаяРазность
					END
					/*
					SELECT '#МаксимальнаяРазность' AS '#МаксимальнаяРазность'
					SELECT
						СКП.Наименование AS Кластер
						,СК.Наименование AS ТорговаяТочка
						,СН.Наименование AS Номенклатура
						,ОТ.ПорядокВнутриКластера
						,ОТ.Разность
					FROM #МаксимальнаяРазность AS ОТ
					LEFT JOIN Справочник_Контрагенты AS СК
						ON ОТ.ТорговаяТочка = СК.Ссылка	
					LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
						ON ОТ.Кластер = СКП.Ссылка
					LEFT JOIN Справочник_Номенклатура AS СН
						ON ОТ.Номенклатура = СН.Ссылка
					ORDER BY
						ОТ.ПорядокВнутриКластера
						,ОТ.Кластер
					*/

					TRUNCATE TABLE #МинимальнаяСтоимость
					INSERT INTO #МинимальнаяСтоимость(Кластер, ПорядокВнутриКластера, ТорговаяТочка, Номенклатура, Стоимость)
					SELECT --TOP 1
						ОТ.Кластер AS Кластер
						,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер 
									ORDER BY ОТ.СтоимостьПеревозки
											,ВТ_3.Количество DESC) AS ПорядокВнутриКластера
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.СтоимостьПеревозки AS Стоимость
					FROM #ТаблицаСтоимостейДоставки AS ОТ
					INNER JOIN #МаксимальнаяРазность AS ВТ_1
						ON ОТ.Кластер = ВТ_1.Кластер
						AND (ОТ.ТорговаяТочка = ВТ_1.ТорговаяТочка OR ВТ_1.ТорговаяТочка IS NULL)
						AND (ОТ.Номенклатура = ВТ_1.Номенклатура OR ВТ_1.Номенклатура IS NULL)
						AND ВТ_1.ПорядокВнутриКластера = 1
					INNER JOIN #ПотребностьНеВосполненная AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.ТорговаяТочка = ВТ_2.ТорговаяТочка
						AND ВТ_2.Количество > 0
					INNER JOIN #ОстаткиНеРаспределенные AS ВТ_3
						ON ОТ.Кластер = ВТ_3.Кластер
						AND ОТ.Номенклатура = ВТ_3.Номенклатура
						AND ВТ_3.Количество > 0
					ORDER BY 
						ОТ.СтоимостьПеревозки
						,ВТ_3.Количество DESC
					
					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT '#МинимальнаяСтоимость' AS '#МинимальнаяСтоимость'
						SELECT * FROM #МинимальнаяСтоимость
					END
					/*
					SELECT '#МинимальнаяСтоимость' AS '#МинимальнаяСтоимость'
					SELECT
						СКП.Наименование AS Кластер
						,СК.Наименование AS ТорговаяТочка
						,СН.Наименование AS Номенклатура
						,ОТ.ПорядокВнутриКластера
						,ОТ.Стоимость
					FROM #МинимальнаяСтоимость AS ОТ
					LEFT JOIN Справочник_Контрагенты AS СК
						ON ОТ.ТорговаяТочка = СК.Ссылка	
					LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
						ON ОТ.Кластер = СКП.Ссылка
					LEFT JOIN Справочник_Номенклатура AS СН
						ON ОТ.Номенклатура = СН.Ссылка
					ORDER BY
						ОТ.ПорядокВнутриКластера
						,ОТ.Кластер
					*/

				END /*Расчет максимальной разности и минимальной стоимости. Конец.*/


				BEGIN /*Добавление данных в опроный план и уменьшение контрольных итоговых значений.*/
				
					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT '#ОстаткиНеРаспределенные' AS '#ОстаткиНеРаспределенные'
						SELECT * FROM #ОстаткиНеРаспределенные AS ОТ
						WHERE ОТ.Количество > 0
						SELECT '#ПотребностьНеВосполненная' AS '#ПотребностьНеВосполненная'
						SELECT * FROM #ПотребностьНеВосполненная AS ОТ
						WHERE ОТ.Количество > 0
					END

					TRUNCATE TABLE #РассчитанныеИзменения
					INSERT INTO #РассчитанныеИзменения (Кластер, ТорговаяТочка, Номенклатура, Количество)
					SELECT
						ОТ.Кластер AS Кластер
						,MAX(ОТ.ТорговаяТочка) AS ТорговаяТочка
						,MAX(ОТ.Номенклатура) AS Номенклатура
						,MIN(ОТ.Количество) AS Количество
					FROM
						(SELECT
							ОТ.Кластер AS Кластер
							,NULL AS ТорговаяТочка
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Количество AS Количество
						FROM #ОстаткиНеРаспределенные AS ОТ
						INNER JOIN #МинимальнаяСтоимость AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.Номенклатура = ВТ.Номенклатура
							AND ВТ.ПорядокВнутриКластера = 1
						WHERE ОТ.Количество > 0
						UNION ALL
						SELECT
							ОТ.Кластер AS Кластер
							,ОТ.ТорговаяТочка AS ТорговаяТочка
							,NULL AS Номенклатура
							,ОТ.Количество AS Количество
						FROM #ПотребностьНеВосполненная AS ОТ
						INNER JOIN #МинимальнаяСтоимость AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
							AND ВТ.ПорядокВнутриКластера = 1
						WHERE ОТ.Количество > 0
							) AS ОТ
					GROUP BY
						ОТ.Кластер
					
					/*
					SELECT COUNT(*) AS 'Количество строк в #РассчитанныеИзменения' FROM #РассчитанныеИзменения 
					SELECT '#РассчитанныеИзменения' AS '#РассчитанныеИзменения'
					SELECT
						СКП.Наименование AS Кластер
						,СК.Наименование AS ТорговаяТочка
						,СН.Наименование AS Номенклатура
						,ОТ.ПорядокВнутриКластера
						,ОТ.Количество
					FROM #РассчитанныеИзменения AS ОТ
					LEFT JOIN Справочник_Контрагенты AS СК
						ON ОТ.ТорговаяТочка = СК.Ссылка	
					LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
						ON ОТ.Кластер = СКП.Ссылка
					LEFT JOIN Справочник_Номенклатура AS СН
						ON ОТ.Номенклатура = СН.Ссылка
					ORDER BY
						ОТ.ПорядокВнутриКластера
						,ОТ.Кластер
					*/
					

					SELECT @Временная_Числовая_001 = COUNT(*) 
					FROM #РассчитанныеИзменения AS ОТ
					INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
						ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
						OR @Отладка_Ограничивать_По_ТТ = 0x00
					INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
						ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
					INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
						ON ОТ.Кластер = ОГ_Т_3.Кластер

					IF @Временная_Числовая_001 > 0 
					BEGIN
					    /*
						SELECT '#МаксимальнаяРазность' AS '#МаксимальнаяРазность'
						;WITH ОбъединениеРазностей
						AS 
						(
							SELECT 
								ОТ.Кластер AS Кластер
								,ОТ.ТорговаяТочка AS ТорговаяТочка
								,NULL AS Номенклатура
								,ОТ.Разность AS Разность
							FROM #РазностьПоТТ AS ОТ
							UNION ALL
							SELECT 
								ОТ.Кластер AS Кластер
								,NULL AS ТорговаяТочка
								,ОТ.Номенклатура AS Номенклатура
								,ОТ.Разность AS Разность
							FROM #РазностьПоНоменклатуре AS ОТ
						)
						SELECT --TOP 1
							ОТ.Кластер AS Кластер
							,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер 
										ORDER BY ОТ.Разность DESC, ОТ.Номенклатура) AS ПорядокВнутриКластера
							,ОТ.ТорговаяТочка AS ТорговаяТочка
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Разность AS Разность
						FROM ОбъединениеРазностей AS ОТ
						ORDER BY
							ОТ.Разность DESC
							,ОТ.Номенклатура

						SELECT 
							ОТ.ТорговаяТочка AS ТорговаяТочка
							,ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Разность AS Разность
						FROM #МаксимальнаяРазность AS ОТ
						--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
						--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
						--	OR @Отладка_Ограничивать_По_ТТ = 0x00
						--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
						--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
						--INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
						--	ON ОТ.Кластер = ОГ_Т_3.Кластер
						WHERE 
							ОТ.ПорядокВнутриКластера = 1
						*/
						/*
						SELECT '#МинимальнаяСтоимость' AS '#МинимальнаяСтоимость'
						SELECT --TOP 1
							ОТ.Кластер AS Кластер
							,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер 
										ORDER BY ОТ.СтоимостьПеревозки, ВТ_3.Количество DESC) AS ПорядокВнутриКластера
							,ОТ.ТорговаяТочка AS ТорговаяТочка
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.СтоимостьПеревозки AS Стоимость
						FROM #ТаблицаСтоимостейДоставки AS ОТ
						INNER JOIN #МаксимальнаяРазность AS ВТ_1
							ON ОТ.Кластер = ВТ_1.Кластер
							AND (ОТ.ТорговаяТочка = ВТ_1.ТорговаяТочка OR ВТ_1.ТорговаяТочка IS NULL)
							AND (ОТ.Номенклатура = ВТ_1.Номенклатура OR ВТ_1.Номенклатура IS NULL)
							AND ВТ_1.ПорядокВнутриКластера = 1
						INNER JOIN #ПотребностьНеВосполненная AS ВТ_2
							ON ОТ.Кластер = ВТ_2.Кластер
							AND ОТ.ТорговаяТочка = ВТ_2.ТорговаяТочка
							AND ВТ_2.Количество > 0
						INNER JOIN #ОстаткиНеРаспределенные AS ВТ_3
							ON ОТ.Кластер = ВТ_3.Кластер
							AND ОТ.Номенклатура = ВТ_3.Номенклатура
							AND ВТ_3.Количество > 0
						ORDER BY 
							ОТ.СтоимостьПеревозки
							,ВТ_3.Количество DESC

						SELECT 
							ОТ.ТорговаяТочка AS ТорговаяТочка
							,ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Стоимость AS Стоимость
						FROM #МинимальнаяСтоимость AS ОТ
						INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
							ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
							OR @Отладка_Ограничивать_По_ТТ = 0x00
						INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
							ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
						INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
							ON ОТ.Кластер = ОГ_Т_3.Кластер
						WHERE 
							ОТ.ПорядокВнутриКластера = 1
						*/
						/*
						SELECT '#РассчитанныеИзменения' AS '#РассчитанныеИзменения'
						SELECT
							ОТ.ТорговаяТочка AS ТорговаяТочка
							,ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Количество AS Количество
						FROM #РассчитанныеИзменения AS ОТ
						INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
							ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
							OR @Отладка_Ограничивать_По_ТТ = 0x00
						--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
						--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
						INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
							ON ОТ.Кластер = ОГ_Т_3.Кластер
					*/
					/*
					SELECT '#ОстаткиНеРаспределенные' AS '#ОстаткиНеРаспределенные'
					SELECT
						ОТ.Кластер AS Кластер
						,NULL AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.Количество AS Количество
					FROM #ОстаткиНеРаспределенные AS ОТ
					--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
					--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
					--	OR @Отладка_Ограничивать_По_ТТ = 0x00
					--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
					--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
					INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
						ON ОТ.Кластер = ОГ_Т_3.Кластер
					WHERE ОТ.Количество > 0
					*/
					/*
					SELECT '#МинимальнаяСтоимость в #ОстаткиНеРаспределенные' AS '#МинимальнаяСтоимость в #ОстаткиНеРаспределенные'
					SELECT
						ОТ.Кластер AS Кластер
						,NULL AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.Количество AS Количество
					FROM #ОстаткиНеРаспределенные AS ОТ
					INNER JOIN #МинимальнаяСтоимость AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ВТ.ПорядокВнутриКластера = 1
					--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
					--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
					--	OR @Отладка_Ограничивать_По_ТТ = 0x00
					--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
					--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
					INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
						ON ОТ.Кластер = ОГ_Т_3.Кластер
					WHERE ОТ.Количество > 0
					*/
					/*
					SELECT '#МинимальнаяСтоимость в #ПотребностьНеВосполненная' AS '#МинимальнаяСтоимость в #ПотребностьНеВосполненная'
					SELECT
						ОТ.Кластер AS Кластер
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,NULL AS Номенклатура
						,ОТ.Количество AS Количество
					FROM #ПотребностьНеВосполненная AS ОТ
					INNER JOIN #МинимальнаяСтоимость AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
						AND ВТ.ПорядокВнутриКластера = 1
					--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
					--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
					--	OR @Отладка_Ограничивать_По_ТТ = 0x00
					--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
					--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
					INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
						ON ОТ.Кластер = ОГ_Т_3.Кластер
					WHERE ОТ.Количество > 0
					*/
					/*
					SELECT '#РассчитанныеИзменения_дебаг' AS '#РассчитанныеИзменения_дебаг'
					SELECT
						ОТ.Кластер AS Кластер
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.Количество AS Количество
					FROM
						(SELECT
							ОТ.Кластер AS Кластер
							,NULL AS ТорговаяТочка
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Количество AS Количество
						FROM #ОстаткиНеРаспределенные AS ОТ
						INNER JOIN #МинимальнаяСтоимость AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.Номенклатура = ВТ.Номенклатура
							AND ВТ.ПорядокВнутриКластера = 1
						WHERE ОТ.Количество > 0
						UNION ALL
						SELECT
							ОТ.Кластер AS Кластер
							,ОТ.ТорговаяТочка AS ТорговаяТочка
							,NULL AS Номенклатура
							,ОТ.Количество AS Количество
						FROM #ПотребностьНеВосполненная AS ОТ
						INNER JOIN #МинимальнаяСтоимость AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
							AND ВТ.ПорядокВнутриКластера = 1
						WHERE ОТ.Количество > 0
							) AS ОТ
						INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
							ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
							OR @Отладка_Ограничивать_По_ТТ = 0x00
						--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
						--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
						INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
							ON ОТ.Кластер = ОГ_Т_3.Кластер
					*/
						PRINT '1'
					END

					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT '#РассчитанныеИзменения' AS '#РассчитанныеИзменения'
						SELECT * FROM #РассчитанныеИзменения

						
						SELECT *
						FROM #ОпорныйПлан AS ОТ
						INNER JOIN #РассчитанныеИзменения AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
							AND ОТ.Номенклатура = ВТ.Номенклатура
						
					END


					UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество + ВТ.Количество
					FROM #ОпорныйПлан AS ОТ
					INNER JOIN #РассчитанныеИзменения AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
						AND ОТ.Номенклатура = ВТ.Номенклатура
	
					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT *
						FROM #ОстаткиНеРаспределенные AS ОТ
						INNER JOIN #РассчитанныеИзменения AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.Номенклатура = ВТ.Номенклатура
					END

					UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество - ВТ.Количество
					FROM #ОстаткиНеРаспределенные AS ОТ
					INNER JOIN 
						(
						SELECT 
							ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,SUM(ОТ.Количество) AS Количество
						FROM #РассчитанныеИзменения AS ОТ						
						GROUP BY 
							ОТ.Кластер
							,ОТ.Номенклатура
						) AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура

					IF @ОстАВалосРаспределить = @ОсталосРаспределить
					BEGIN
						SELECT *
						FROM #ПотребностьНеВосполненная AS ОТ
						INNER JOIN #РассчитанныеИзменения AS ВТ
							ON ОТ.Кластер = ВТ.Кластер
							AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
					END

					--SELECT SUM(ОТ.Количество) AS КоличествоДо
					--FROM #ПотребностьНеВосполненная AS ОТ

					--SELECT SUM(ОТ.Количество) AS Обработано
					--FROM #РассчитанныеИзменения AS ОТ

					UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество - ВТ.Количество
					FROM #ПотребностьНеВосполненная AS ОТ
					INNER JOIN 
						(
						SELECT 
							ОТ.Кластер AS Кластер
							,ОТ.ТорговаяТочка AS ТорговаяТочка
							,SUM(ОТ.Количество) AS Количество
						FROM #РассчитанныеИзменения AS ОТ
						GROUP BY 
							ОТ.Кластер
							,ОТ.ТорговаяТочка
						) AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка

					--SELECT SUM(ОТ.Количество) AS КоличествоПосле
					--FROM #ПотребностьНеВосполненная AS ОТ

					--RETURN

					TRUNCATE TABLE #АктуальныеКластеры
					INSERT INTO #АктуальныеКластеры(Кластер, Потребность)
					SELECT
						ОТ.Кластер AS Кластер
						,SUM(ОТ.Количество) AS Потребность
					FROM #ПотребностьНеВосполненная AS ОТ
					WHERE ОТ.Количество > 0
					GROUP BY ОТ.Кластер
					HAVING SUM(ОТ.Количество) > 0
					/*
					SELECT '#АктуальныеКластеры' AS '#АктуальныеКластеры'
					SELECT
						СКП.Наименование AS Кластер
						,ОТ.Потребность AS Потребность
					FROM #АктуальныеКластеры AS ОТ
						INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
							ON ОТ.Кластер = ОГ_Т_3.Кластер
					LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
						ON ОТ.Кластер = СКП.Ссылка
					*/
					IF @ОстАВалосРаспределить = @ОсталосРаспределить
						RETURN

				END /*Добавление данных в опроный план и уменьшение контрольных итоговых значений. Конец.*/
			
				SET @ОстАВалосРаспределить = @ОсталосРаспределить

				SELECT @ОсталосРаспределить = SUM(ОТ.Количество) 
				FROM #ПотребностьНеВосполненная AS ОТ

			/* WHILE @ОсталосРаспределить > 0. Конец. */
			END 
			/*
			SELECT '#ПотребностьНеВосполненная' AS '#ПотребностьНеВосполненная'
			SELECT
				СК.Наименование AS ТорговаяТочка
				,СКП.Наименование AS КластерДляПодсортировки
				,ОТ.Количество AS Количество
			FROM #ПотребностьНеВосполненная AS ОТ
			INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
				ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
				OR @Отладка_Ограничивать_По_ТТ = 0x00
			LEFT JOIN Справочник_Контрагенты AS СК
				ON ОТ.ТорговаяТочка = СК.Ссылка	
			LEFT JOIN Справочник_КластерыНоменклатурыДляПодсортировки AS СКП
				ON ОТ.Кластер = СКП.Ссылка
			*/
			/*
			SELECT '#ОпорныйПлан после 3-й фазы' AS '#ОпорныйПлан после 3-й фазы'
			SELECT
				ОТ.Кластер AS Кластер
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,SUM(CASE WHEN ОТ.Номенклатура = 'ИТ15' THEN ОТ.Количество ELSE 0 END) AS 'ИТ15'
				,SUM(CASE WHEN ОТ.Номенклатура = 'К132' THEN ОТ.Количество ELSE 0 END) AS 'К132'
				,SUM(CASE WHEN ОТ.Номенклатура = 'Л422' THEN ОТ.Количество ELSE 0 END) AS 'Л422'
				,SUM(CASE WHEN ОТ.Номенклатура = 'СР71' THEN ОТ.Количество ELSE 0 END) AS 'СР71'
				,SUM(CASE WHEN ОТ.Номенклатура = 'Т142' THEN ОТ.Количество ELSE 0 END) AS 'Т142'
			FROM #ОпорныйПлан AS ОТ
			--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
			--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
			--	OR @Отладка_Ограничивать_По_ТТ = 0x00
			--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
			--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
			--INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
			--	ON ОТ.Кластер = ОГ_Т_3.Кластер
			GROUP BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
			ORDER BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
		    */
		
		/*Третья фаза. Первоначальное распределение товаров по ТТ. Конец.*/
		END

		BEGIN /*Четвертая фаза. 
				Попытка уменьшить количество различных артикулов распределенных на одну ТТ*/
		
			DROP TABLE IF EXISTS #ПотенциальноНеОптимальныеРаспределения 
			CREATE TABLE #ПотенциальноНеОптимальныеРаспределения(
				Кластер varchar(50)
				,ТорговаяТочка varchar(50)
				,Количество numeric(10)
				)
			CREATE INDEX IDX ON #ПотенциальноНеОптимальныеРаспределения(Кластер, ТорговаяТочка)

			DROP TABLE IF EXISTS #tmp_01_01 
			CREATE TABLE #tmp_01_01(
				Кластер varchar(50)
				,ТТ1 varchar(50)
				,ТТ2 varchar(50)
				,ТТ3 varchar(50)
				,Ранг bigint
				,ТТ_IDX_1 varchar(50)
				,ТТ_IDX_2 varchar(50)
									)
			CREATE INDEX IDX ON #tmp_01_01(Кластер, ТТ1, ТТ2, ТТ3)

			DROP TABLE IF EXISTS #tmp_01_02 
			CREATE TABLE #tmp_01_02(
				Кластер varchar(50)
				,ТТ1 varchar(50)
				,ТТ2 varchar(50)
				,ТТ3 varchar(50)
				,Ранг bigint
				,Номер bigint
				,ТТ_IDX_1 varchar(50)
				,ТТ_IDX_2 varchar(50)
									)
			CREATE INDEX IDX ON #tmp_01_02(Кластер, ТТ1, ТТ2, ТТ3, Ранг, Номер)

			DROP TABLE IF EXISTS #КлассификаторПарТорговыхТочек 
			CREATE TABLE #КлассификаторПарТорговыхТочек(
				Кластер varchar(50)
				,ТТ1 varchar(50)
				,ТТ2 varchar(50)
				,ТТ3 varchar(50)
				,Ранг bigint
									)
			CREATE INDEX IDX ON #КлассификаторПарТорговыхТочек(Кластер, ТТ1, ТТ2, ТТ3, Ранг)

			DROP TABLE IF EXISTS #ОптимизационныеЗамены 
			CREATE TABLE #ОптимизационныеЗамены(
				Кластер varchar(50)
				,Ранг bigint
				,НомерВРанге bigint
				,ТорговаяТочка1 varchar(50)
				,Номенклатура1 varchar(50)
				,Количество1 numeric(10)
				,ТорговаяТочка2 varchar(50)
				,Номенклатура2 varchar(50)
				,Количество2 numeric(10)
				,ТорговаяТочка3 varchar(50)
				,Номенклатура3 varchar(50)
				,Количество3 numeric(10)
				,Стоимость1 numeric(10)
				,Стоимость2 numeric(10)
				,Стоимость3 numeric(10)
				,Стоимость4 numeric(10)
				,АбстрактноеУвеличениеСтоимостиДоставки numeric(10)
				)
			CREATE INDEX IDX ON #ОптимизационныеЗамены(Кластер, Ранг, НомерВРанге, ТорговаяТочка1, Номенклатура1, ТорговаяТочка2, Номенклатура2, ТорговаяТочка3, Номенклатура3)

			INSERT INTO #tmp_01_01(Кластер, ТТ1, ТТ2, ТТ3, Ранг, ТТ_IDX_1, ТТ_IDX_2)
			SELECT DISTINCT
				ОТ.КластерДляПодсортировки AS Кластер
				,ОТ.ТорговаяТочка AS ТТ1
				,ВТ.ТорговаяТочка AS ТТ2
				,ОТ.ТорговаяТочка AS ТТ3
				,RANK() OVER (PARTITION BY ОТ.КластерДляПодсортировки
							  ORDER BY
								ОТ.КластерДляПодсортировки
								,CASE WHEN ОТ.ТорговаяТочка <= ВТ.ТорговаяТочка THEN ОТ.ТорговаяТочка ELSE ВТ.ТорговаяТочка END
								,CASE WHEN ОТ.ТорговаяТочка <= ВТ.ТорговаяТочка THEN ВТ.ТорговаяТочка ELSE ОТ.ТорговаяТочка END) AS Ранг
				,CASE WHEN ОТ.ТорговаяТочка <= ВТ.ТорговаяТочка THEN ОТ.ТорговаяТочка ELSE ВТ.ТорговаяТочка END AS ТТ_IDX_1
				,CASE WHEN ОТ.ТорговаяТочка <= ВТ.ТорговаяТочка THEN ВТ.ТорговаяТочка ELSE ОТ.ТорговаяТочка END AS ТТ_IDX_2
			FROM #Потребность AS ОТ
			FULL JOIN #Потребность AS ВТ
				ON ОТ.КластерДляПодсортировки = ВТ.КластерДляПодсортировки
		
			INSERT INTO #tmp_01_02(Кластер, ТТ1, ТТ2, ТТ3, Ранг, Номер, ТТ_IDX_1, ТТ_IDX_2)
			SELECT 
				ОТ.Кластер AS Кластер
				,ОТ.ТТ1 AS ТТ1
				,ОТ.ТТ2 AS ТТ2
				,ОТ.ТТ3 AS ТТ3
				,ОТ.Ранг AS Ранг
				,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ОТ.Ранг 
									ORDER BY ОТ.Кластер, ОТ.ТТ1, ОТ.ТТ2) AS Номер
				,ОТ.ТТ_IDX_1 AS ТТ_IDX_1
				,ОТ.ТТ_IDX_2 AS ТТ_IDX_2
			FROM #tmp_01_01 AS ОТ
		
			INSERT INTO #КлассификаторПарТорговыхТочек (Кластер, ТТ1, ТТ2, ТТ3, Ранг)
			SELECT
				ОТ.Кластер AS Кластер
				,ОТ.ТТ1 AS ТТ1
				,ОТ.ТТ2 AS ТТ2
				,ОТ.ТТ3 AS ТТ3
				,ОТ.Ранг AS Ранг
			FROM #tmp_01_02 AS ОТ
			WHERE ОТ.Номер = 1
			ORDER BY
				ОТ.Кластер
				,ОТ.Ранг
				,ОТ.Номер
		
			INSERT INTO #ПотенциальноНеОптимальныеРаспределения (Кластер, ТорговаяТочка, Количество)
			SELECT
				ОТ.Кластер AS Кластер
				,ОТ.ТорговаяТочка AS ТорговаяТочка 
				,COUNT(ОТ.Количество) AS Количество
			FROM #ОпорныйПлан AS ОТ
			WHERE ОТ.Количество > 0
			GROUP BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
			HAVING COUNT(ОТ.Количество) > 1


			--SELECT '#ОпорныйПлан' AS '#ОпорныйПлан'
			INSERT INTO #ОптимизационныеЗамены(Кластер, Ранг, НомерВРанге, ТорговаяТочка1, Номенклатура1, Количество1, 
												ТорговаяТочка2, Номенклатура2, Количество2, ТорговаяТочка3, Номенклатура3, Количество3,
												Стоимость1, Стоимость2, Стоимость3, Стоимость4, АбстрактноеУвеличениеСтоимостиДоставки)
			SELECT 
				ОТ.Кластер AS Кластер
				,ВТ_3.Ранг AS Ранг
				,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ВТ_3.Ранг, ОТ.Номенклатура
									ORDER BY ВТ_О_2.СтоимостьПеревозки - ВТ_О_1.СтоимостьПеревозки + ВТ_О_4.СтоимостьПеревозки - ВТ_О_3.СтоимостьПеревозки) AS НомерВРанге
				,ОТ.ТорговаяТочка AS ТорговаяТочка1
				,ОТ.Номенклатура AS Номенклатура1
				,ОТ.Количество AS Количество1
				,ВТ_1.ТорговаяТочка AS ТорговаяТочка2
				,ВТ_1.Номенклатура AS Номенклатура2
				,ВТ_1.Количество AS Количество2
				,ВТ_2.ТорговаяТочка AS ТорговаяТочка3
				,ВТ_2.Номенклатура AS Номенклатура3
				,ВТ_2.Количество AS Количество3
				,ВТ_О_1.СтоимостьПеревозки AS Стоимость1
				,ВТ_О_2.СтоимостьПеревозки AS Стоимость2
				,ВТ_О_3.СтоимостьПеревозки AS Стоимость3
				,ВТ_О_4.СтоимостьПеревозки AS Стоимость4
				,ВТ_О_2.СтоимостьПеревозки - ВТ_О_1.СтоимостьПеревозки + ВТ_О_4.СтоимостьПеревозки - ВТ_О_3.СтоимостьПеревозки AS АбстрактноеУвеличениеСтоимостиДоставки
			FROM #ОпорныйПлан AS ОТ
			FULL JOIN #ОпорныйПлан AS ВТ_1
				ON ОТ.Кластер = ВТ_1.Кластер
				AND ОТ.ТорговаяТочка <> ВТ_1.ТорговаяТочка
				AND ОТ.Номенклатура <> ВТ_1.Номенклатура
				AND ОТ.Количество > 0
				AND ВТ_1.Количество > 0
				AND ОТ.Количество = ВТ_1.Количество
			LEFT JOIN #ОпорныйПлан AS ВТ_2
				ON ОТ.Кластер = ВТ_2.Кластер
				AND ВТ_1.ТорговаяТочка = ВТ_2.ТорговаяТочка
				AND ОТ.Номенклатура = ВТ_2.Номенклатура
				AND ВТ_2.Количество > 0
				--AND ВТ_2.Количество >= ОТ.Количество 
			INNER JOIN #ПотенциальноНеОптимальныеРаспределения AS ТГ_1
				ON ОТ.Кластер = ТГ_1.Кластер
				AND ОТ.ТорговаяТочка = ТГ_1.ТорговаяТочка
			INNER JOIN #ПотенциальноНеОптимальныеРаспределения AS ТГ_2
				ON ВТ_1.Кластер = ТГ_2.Кластер
				AND ВТ_1.ТорговаяТочка = ТГ_2.ТорговаяТочка
			INNER JOIN #ПотенциальноНеОптимальныеРаспределения AS ТГ_3
				ON ВТ_2.Кластер = ТГ_3.Кластер
				AND ВТ_2.ТорговаяТочка = ТГ_3.ТорговаяТочка
			LEFT JOIN #ТаблицаСтоимостейДоставки AS ВТ_О_1
				ON ОТ.Кластер = ВТ_О_1.Кластер
				AND ОТ.ТорговаяТочка = ВТ_О_1.ТорговаяТочка
				AND ОТ.Номенклатура = ВТ_О_1.Номенклатура
			LEFT JOIN #ТаблицаСтоимостейДоставки AS ВТ_О_2
				ON ОТ.Кластер = ВТ_О_1.Кластер
				AND ОТ.ТорговаяТочка = ВТ_О_2.ТорговаяТочка
				AND ВТ_1.Номенклатура = ВТ_О_2.Номенклатура
			LEFT JOIN #ТаблицаСтоимостейДоставки AS ВТ_О_3
				ON ОТ.Кластер = ВТ_О_3.Кластер
				AND ВТ_1.ТорговаяТочка = ВТ_О_3.ТорговаяТочка
				AND ВТ_1.Номенклатура = ВТ_О_3.Номенклатура
			LEFT JOIN #ТаблицаСтоимостейДоставки AS ВТ_О_4
				ON ОТ.Кластер = ВТ_О_4.Кластер
				AND ВТ_1.ТорговаяТочка = ВТ_О_4.ТорговаяТочка
				AND ОТ.Номенклатура = ВТ_О_4.Номенклатура
			LEFT JOIN #КлассификаторПарТорговыхТочек AS ВТ_3
				ON ОТ.Кластер = ВТ_3.Кластер
				AND (ОТ.ТорговаяТочка = ВТ_3.ТТ1 AND ВТ_1.ТорговаяТочка = ВТ_3.ТТ2
				OR ОТ.ТорговаяТочка = ВТ_3.ТТ2 AND ВТ_1.ТорговаяТочка = ВТ_3.ТТ1)
			WHERE ОТ.ТорговаяТочка IS NOT NULL AND ВТ_1.ТорговаяТочка IS NOT NULL AND ВТ_2.ТорговаяТочка IS NOT NULL
		
			BEGIN /*Непостредственно операция замены в опорном плане.*/

				UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество - ВТ.Количество1
				FROM #ОпорныйПлан AS ОТ
				INNER JOIN #ОптимизационныеЗамены AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка1
					AND ОТ.Номенклатура = ВТ.Номенклатура1
				WHERE ВТ.НомерВРанге = 1

				UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество + ВТ.Количество2
				FROM #ОпорныйПлан AS ОТ
				INNER JOIN #ОптимизационныеЗамены AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка1
					AND ОТ.Номенклатура = ВТ.Номенклатура2
				WHERE ВТ.НомерВРанге = 1

				UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество - ВТ.Количество2
				FROM #ОпорныйПлан AS ОТ
				INNER JOIN #ОптимизационныеЗамены AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка2
					AND ОТ.Номенклатура = ВТ.Номенклатура2
				WHERE ВТ.НомерВРанге = 1

				UPDATE ОТ
					SET ОТ.Количество = ОТ.Количество + ВТ.Количество2
				FROM #ОпорныйПлан AS ОТ
				INNER JOIN #ОптимизационныеЗамены AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка2
					AND ОТ.Номенклатура = ВТ.Номенклатура1
				WHERE ВТ.НомерВРанге = 1

			/*Непостредственно операция замены в опорном плане. Конец.*/
			END 
			
			/*
			SELECT '#ОпорныйПлан после 4-й фазы' AS '#ОпорныйПлан после 4-й фазы'
			SELECT
				ОТ.Кластер AS Кластер
				,ОТ.ТорговаяТочка AS ТорговаяТочка
				,SUM(CASE WHEN ОТ.Номенклатура = 'ИТ15' THEN ОТ.Количество ELSE 0 END) AS 'ИТ15'
				,SUM(CASE WHEN ОТ.Номенклатура = 'К132' THEN ОТ.Количество ELSE 0 END) AS 'К132'
				,SUM(CASE WHEN ОТ.Номенклатура = 'Л422' THEN ОТ.Количество ELSE 0 END) AS 'Л422'
				,SUM(CASE WHEN ОТ.Номенклатура = 'СР71' THEN ОТ.Количество ELSE 0 END) AS 'СР71'
				,SUM(CASE WHEN ОТ.Номенклатура = 'Т142' THEN ОТ.Количество ELSE 0 END) AS 'Т142'
			FROM #ОпорныйПлан AS ОТ
			--INNER JOIN @ВыбТорговаяТочка AS ОГ_Т_1
			--	ON ОТ.ТорговаяТочка = ОГ_Т_1.ТТ
			--	OR @Отладка_Ограничивать_По_ТТ = 0x00
			--INNER JOIN @ВыбНоменклатура AS ОГ_Т_2
			--	ON ОТ.Номенклатура = ОГ_Т_2.Номенклатура
			--INNER JOIN @ВыбКластерДляПодсортировки AS ОГ_Т_3
			--	ON ОТ.Кластер = ОГ_Т_3.Кластер
			GROUP BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
			ORDER BY
				ОТ.Кластер
				,ОТ.ТорговаяТочка
			*/

		/*Четвертая фаза. Попытка уменьшить количество различных артикулов распределенных на одну ТТ. Конец.*/
		END 
		
		BEGIN /*Пятая фаза. 
				Распределение характеристик по оптимальному плану. Вариант II*/

			BEGIN /* Расчет коэффициентов для каждого размера на каждой ТТ. */
				
				INSERT INTO #КоличествоРазмеровДляНоменклатуры(Кластер, Номенклатура, КоличествоРазмеров)
				SELECT
					ОТ.КластерДляПодсортировки AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,COUNT(DISTINCT ОТ.ХарактеристикаНоменклатуры) AS КоличествоРазмеров
				FROM #ОстаткиСклада_СХарактеристиками AS ОТ
				GROUP BY
					ОТ.КластерДляПодсортировки
					,ОТ.Номенклатура

				--SELECT '#КоличествоРазмеровДляНоменклатуры' AS '#КоличествоРазмеровДляНоменклатуры'
				--SELECT * FROM #КоличествоРазмеровДляНоменклатуры

				INSERT INTO #КоэффициентыРазмеровДляНоменклатуры(Кластер, ТорговаяТочка, Номенклатура,
																Количество, КоличествоРазмеров, Коэффициент)
				SELECT 
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.Количество AS Количество
					,ВТ.КоличествоРазмеров AS КоличествоРазмеров
					,ОТ.Количество / ВТ.КоличествоРазмеров AS Коэффициент
				FROM #ОпорныйПлан AS ОТ
				LEFT JOIN #КоличествоРазмеровДляНоменклатуры AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.Номенклатура = ВТ.Номенклатура

				--SELECT '#КоэффициентыРазмеровДляНоменклатуры' AS '#КоэффициентыРазмеровДляНоменклатуры'
				--SELECT * FROM #КоэффициентыРазмеровДляНоменклатуры

				INSERT INTO #КоличествоТорговыхТочекДляХарактеристики(Кластер, Номенклатура, КоличествоТТ)
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,COUNT(DISTINCT ОТ.ТорговаяТочка) AS КоличествоТТ
				FROM #ОпорныйПлан AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.Номенклатура

				--SELECT '#КоличествоТорговыхТочекДляХарактеристики' AS '#КоличествоТорговыхТочекДляХарактеристики'
				--SELECT * FROM #КоличествоТорговыхТочекДляХарактеристики

				INSERT INTO #КоэффициентыТорговыхТочекДляХарактеристики(Кластер, Номенклатура, ХарактеристикаНоменклатуры,
																		Количество, КоличествоТТ, Коэффициент)
				SELECT 
					ОТ.КластерДляПодсортировки AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
					,SUM(ОТ.Количество) AS Количество
					,ВТ.КоличествоТТ AS КоличествоТТ
					,SUM(ОТ.Количество) / ВТ.КоличествоТТ AS Коэффициент
				FROM #ОстаткиСклада_СХарактеристиками AS ОТ
				LEFT JOIN #КоличествоТорговыхТочекДляХарактеристики AS ВТ
					ON ОТ.КластерДляПодсортировки = ВТ.Кластер
				GROUP BY
					ОТ.КластерДляПодсортировки
					,ОТ.Номенклатура
					,ОТ.ХарактеристикаНоменклатуры
					,ВТ.КоличествоТТ

				--SELECT '#КоэффициентыТорговыхТочекДляХарактеристики' AS '#КоэффициентыТорговыхТочекДляХарактеристики'
				--SELECT * FROM #КоэффициентыТорговыхТочекДляХарактеристики

				INSERT INTO #ТекущаяМартицаКоэффициентов(Кластер ,Номенклатура, ХарактеристикаНоменклатуры, ТорговаяТочка, 
														КоэффициентХарактеристики, КоэффициентТТ, Коэффициент)
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
					,ВТ.ТорговаяТочка AS ТорговаяТочка
					,ОТ.Коэффициент AS КоэффициентХарактеристики
					,ВТ.Коэффициент AS КоэффициентТТ
					,ОТ.Коэффициент * ВТ.Коэффициент AS Коэффициент
				FROM #КоэффициентыТорговыхТочекДляХарактеристики AS ОТ
				INNER JOIN #КоэффициентыРазмеровДляНоменклатуры AS ВТ
				ON ОТ.Кластер = ВТ.Кластер
				AND ОТ.Номенклатура = ВТ.Номенклатура
				AND ОТ.Кластер = ВТ.Кластер

				--SELECT '#ТекущаяМартицаКоэффициентов' AS '#ТекущаяМартицаКоэффициентов'
				/*
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					--,ОТ.Номенклатура AS Номенклатура
					,SUM(ОТ.Коэффициент) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Коэффициент ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Коэффициент ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Коэффициент ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Коэффициент ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Коэффициент ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Коэффициент ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Коэффициент ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Коэффициент ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Коэффициент ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Коэффициент ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Коэффициент ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Коэффициент ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Коэффициент ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Коэффициент ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Коэффициент ELSE 0 END) AS '22'
				FROM 
					#ТекущаяМартицаКоэффициентов AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка
				*/
			/* Расчет коэффициентов для каждого размера на каждой ТТ. */
			END

			BEGIN /* Сортировка размеров исходя из необходимости распределять хотя-бы через размер. до 15.04.2022. */
				
				/*
				Сортировка происходила по следующема улгоритму:
					1) Выбирается самая первая по рейтингу характеристика (размер)
					2) Устанавливается запрет на выбор характеристик вокруг первого значения.
					3) Выбирается следующий по рейтингу из доступных.
					4) Добавляется запрет на выбор характеристиг вокруг выбранного значения.
					5) Повторяем пункты 3 и 4 до тех пор, пока есть что выбирать.
					Результатом должен стать список, в котором выбрано несколько характерстик, расположенных по увеличению рейтинга.
					А остальные помечены, как недоступные для выбора.
					6) Выбираем все ранее недоступные для выбора и располагаем их по увеличению рейтигна. И пристыковываем к распределенным на шагах 1-5.
					В результате получаем список отстортированный не толко по рейтингу, но и по критерию - максимальный разброс.
				*/

				PRINT('Пропущен шаг "Сортировка размеров исходя из необходимости распределять хотя-бы через размер. до 15.04.2022."')
			/*
				INSERT INTO #ЧерновикРейтингаРазмеров(Кластер, Номенклатура, Батч, РейтингБатча, ХарактеристикаНоменклатуры, Рейтинг, РейтингКНДП, СтопЛист)
				SELECT DISTINCT 
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ВТ_1.Батч AS Батч 
					,ВТ_2.Порядок AS РейтингБатча 
					,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
					,ROW_NUMBER() OVER (PARTITION BY ОТ.ТорговаяТочка, ОТ.Кластер, ОТ.Номенклатура  ORDER BY ОТ.Коэффициент DESC, ОТ.ХарактеристикаНоменклатуры)  AS Рейтинг
					,NULL AS РейтингКНДП
					,0x00 AS СтопЛист
					--,RANK() OVER (PARTITION BY ОТ.ТорговаяТочка, ОТ.КластерДляПодсортировки, ОТ.Номенклатура  ORDER BY ОТ.Коэффициент DESC)  AS Рейтинг
				FROM #ТекущаяМартицаКоэффициентов AS ОТ
				INNER JOIN #БатчиРазмеров AS ВТ_1 ON
					ОТ.ХарактеристикаНоменклатуры = ВТ_1.Размер
				INNER JOIN #ПорядокБатчейРазмеров AS ВТ_2 ON
					ВТ_1.Батч = ВТ_2.Батч
				CREATE INDEX IDX ON #ЧерновикРейтингаРазмеров(Кластер, Номенклатура, Батч, ХарактеристикаНоменклатуры)
		
				--SELECT '#ЧерновикРейтингаРазмеров' AS '#ЧерновикРейтингаРазмеров'
				/*
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					--,ОТ.Номенклатура AS Номенклатура
					--,SUM(ОТ.Рейтинг) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Рейтинг ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Рейтинг ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Рейтинг ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Рейтинг ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Рейтинг ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Рейтинг ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Рейтинг ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Рейтинг ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Рейтинг ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Рейтинг ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Рейтинг ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Рейтинг ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Рейтинг ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Рейтинг ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Рейтинг ELSE 0 END) AS '22'
				FROM 
					#ЧерновикРейтингаРазмеров AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка
				*/
				--SELECT * FROM #ЧерновикРейтингаРазмеров
				--RETURN

				SELECT 
					@КоличествоНеприсвоенныхРейтингов = ISNULL(COUNT(*), 0)
				FROM #ЧерновикРейтингаРазмеров AS ОТ
				WHERE
					ОТ.РейтингКНДП IS NULL
					AND ОТ.СтопЛист = 0x00
			
				SET @ТекущийРейтинг = 1
				WHILE @КоличествоНеприсвоенныхРейтингов > 0
				BEGIN /*Шаг. Присвоение очередных рейтингов в случае большого выбора. */			
							
					TRUNCATE TABLE #СледующийРейтинг
					/*
					;WITH ТекущиеРейтингиВнутриБатчей
					AS 
					(
						SELECT 
							ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
							,ВТ_1.Батч AS Батч
							,ВТ_2.Порядок AS РейтингБатча
							,ОТ.Рейтинг AS Рейтинг
						FROM #ЧерновикРейтингаРазмеров AS ОТ
						INNER JOIN #БатчиРазмеров AS ВТ_1 ON
							ОТ.ХарактеристикаНоменклатуры = ВТ_1.Размер
						INNER JOIN #ПорядокБатчейРазмеров AS ВТ_2 ON
							ВТ_1.Батч = ВТ_2.Батч
						WHERE
							ОТ.РейтингКНДП IS NULL
							AND ОТ.СтопЛист = 0x00
					)
					INSERT INTO #СледующийРейтинг(ТорговаяТочка, Кластер, Номенклатура, Рейтинг)
					SELECT 
						'ТТ' AS ТорговаяТочка
						,ОТ.Кластер AS КластерДляПодсортировки
						,ОТ.Номенклатура AS Номенклатура
						,MIN(ОТ.Рейтинг) AS Рейтинг
					FROM ТекущиеРейтингиВнутриБатчей AS ОТ
					INNER JOIN (
								SELECT
									ОТ.Кластер AS Кластер
									,ОТ.Номенклатура AS Номенклатура
									,MIN(ОТ.РейтингБатча) AS РейтингБатча
								FROM ТекущиеРейтингиВнутриБатчей AS ОТ
								GROUP BY 
									ОТ.Кластер
									,ОТ.Номенклатура 
								) AS ВТ_1 ON
						ОТ.Кластер = ВТ_1.Кластер
						AND ОТ.Номенклатура = ВТ_1.Номенклатура
						AND ОТ.РейтингБатча = ВТ_1.РейтингБатча
					GROUP BY 
						ОТ.Кластер
						,ОТ.Номенклатура
						,ОТ.Батч
					*/	

					INSERT INTO #СледующийРейтинг(Кластер, Номенклатура, Батч, Рейтинг)
					SELECT 
						ОТ.Кластер AS КластерДляПодсортировки
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.Батч AS Батч
						,MIN(ОТ.Рейтинг) AS Рейтинг
					FROM #ЧерновикРейтингаРазмеров AS ОТ
					WHERE
						ОТ.РейтингКНДП IS NULL
						AND ОТ.СтопЛист = 0x00
					GROUP BY 
						ОТ.Кластер
						,ОТ.Номенклатура
						,ОТ.Батч

					--SELECT * FROM #СледующийРейтинг
					--RETURN

					UPDATE ОТ
					SET
						ОТ.РейтингКНДП = @ТекущийРейтинг
					FROM #ЧерновикРейтингаРазмеров AS ОТ
					INNER JOIN #СледующийРейтинг AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.Батч = ВТ.Батч
						AND ОТ.Рейтинг = ВТ.Рейтинг
					
					--SELECT '#ЧерновикРейтингаРазмеров' AS '#ЧерновикРейтингаРазмеров'
					--SELECT * FROM #ЧерновикРейтингаРазмеров
					--RETURN

					;WITH ПотенциалДляБлокировки
					AS 
					(
						SELECT 						
							ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Батч AS Батч
							,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						FROM 
							#ЧерновикРейтингаРазмеров AS ОТ
						WHERE
							ОТ.РейтингКНДП IS NOT NULL

						UNION

						SELECT 						
							ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Батч AS Батч
							,ВТ_1.Лево AS ХарактеристикаНоменклатуры
						FROM 
							#ЧерновикРейтингаРазмеров AS ОТ
						LEFT JOIN #МаскаИсключений AS ВТ_1
							ON ОТ.ХарактеристикаНоменклатуры = ВТ_1.Центр
						WHERE
							ОТ.РейтингКНДП IS NOT NULL

						UNION

						SELECT 						
							ОТ.Кластер AS Кластер
							,ОТ.Номенклатура AS Номенклатура
							,ОТ.Батч AS Батч
							,ВТ_1.Право AS ХарактеристикаНоменклатуры
						FROM 
							#ЧерновикРейтингаРазмеров AS ОТ
						LEFT JOIN #МаскаИсключений AS ВТ_1
							ON ОТ.ХарактеристикаНоменклатуры = ВТ_1.Центр
						WHERE
							ОТ.РейтингКНДП IS NOT NULL
					)
					UPDATE ОТ
					SET ОТ.СтопЛист = 0x01
					FROM 
						#ЧерновикРейтингаРазмеров AS ОТ
					INNER JOIN ПотенциалДляБлокировки AS ВТ_1
						ON ОТ.ХарактеристикаНоменклатуры = ВТ_1.ХарактеристикаНоменклатуры
					WHERE
						ОТ.РейтингКНДП IS NULL
				
					-- Увеличение текущего рейтинга
					SET @ТекущийРейтинг = @ТекущийРейтинг + 1

					-- Подсчет количества еще не установленных рейтингов
					SELECT 
						@КоличествоНеприсвоенныхРейтингов = ISNULL(COUNT(*), 0)
					FROM #ЧерновикРейтингаРазмеров AS ОТ
					WHERE
						ОТ.РейтингКНДП IS NULL
						AND ОТ.СтопЛист = 0x00
					
				/*Шаг. Присвоение очередных рейтингов в случае большого выбора. До 15.04.2022. Окончание.*/
				END

				--SELECT * FROM #ЧерновикРейтингаРазмеров

				--RETURN
				
				TRUNCATE TABLE #СледующийРейтинг

				INSERT INTO #СледующийРейтинг(Кластер, Номенклатура, Батч, Рейтинг)
				SELECT 
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.Батч AS Батч
					,MAX(ОТ.РейтингКНДП) AS Рейтинг
				FROM #ЧерновикРейтингаРазмеров AS ОТ
				WHERE
					ОТ.РейтингКНДП IS NOT NULL
				GROUP BY 
					ОТ.Кластер
					,ОТ.Номенклатура
					,ОТ.Батч

				;WITH ТаблицаНовыхНомеров
				AS 
				(
					SELECT 
						ОТ.Кластер AS Кластер
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.Батч AS Батч
						,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ОТ.Рейтинг AS Рейтинг
						,ОТ.РейтингКНДП AS РейтингКНДП
						,ВТ.Рейтинг + ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ОТ.Батч, ОТ.Номенклатура ORDER BY ОТ.Рейтинг) AS НовыйРейтинг
						,ОТ.СтопЛист AS СтопЛист
			
					FROM
						#ЧерновикРейтингаРазмеров AS ОТ
						INNER JOIN #СледующийРейтинг AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.Батч = ВТ.Батч
					WHERE
						ОТ.РейтингКНДП IS NULL
				)

				UPDATE ОТ
					SET ОТ.РейтингКНДП = ВТ.НовыйРейтинг
				FROM #ЧерновикРейтингаРазмеров AS ОТ
				INNER JOIN ТаблицаНовыхНомеров AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.Номенклатура = ВТ.Номенклатура
					AND ОТ.Батч = ВТ.Батч
					AND ОТ.ХарактеристикаНоменклатуры = ВТ.ХарактеристикаНоменклатуры
					AND ОТ.Рейтинг = ВТ.Рейтинг
				WHERE
					ОТ.РейтингКНДП IS NULL
				
				SELECT '#ЧерновикРейтингаРазмеров' AS '#ЧерновикРейтингаРазмеров'
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Батч AS Батч
					--,ОТ.Номенклатура AS Номенклатура
					--,SUM(ОТ.Рейтинг) AS Количество
					,MAX(CASE WHEN ОТ.РейтингКНДП =  1 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '1'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  2 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '2'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  3 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '3'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  4 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '4'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  5 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '5'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  6 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '6'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  7 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '7'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  8 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '8'
					,MAX(CASE WHEN ОТ.РейтингКНДП =  9 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '9'
					,MAX(CASE WHEN ОТ.РейтингКНДП = 10 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '10'
					,MAX(CASE WHEN ОТ.РейтингКНДП = 11 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '11'
					,MAX(CASE WHEN ОТ.РейтингКНДП = 12 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '12'
					,MAX(CASE WHEN ОТ.РейтингКНДП = 13 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '13'
					,MAX(CASE WHEN ОТ.РейтингКНДП = 14 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '14'
					,MAX(CASE WHEN ОТ.РейтингКНДП = 15 THEN ОТ.ХарактеристикаНоменклатуры ELSE '' END) AS '16'
				FROM 
					#ЧерновикРейтингаРазмеров AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.Батч
				
				--RETURN

				-- Финальное приведение рейтинга КНДП к общему рейтингу по каждой номенклатуре. В дальнейшем Батчи не важны.
				INSERT INTO #РейтингРазмеров(Кластер, Номенклатура, ХарактеристикаНоменклатуры, РейтингКНДП)
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
					,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ОТ.Номенклатура ORDER BY ОТ.Кластер, ОТ.Номенклатура, ОТ.РейтингБатча, ОТ.РейтингКНДП)
				FROM #ЧерновикРейтингаРазмеров AS ОТ

				CREATE INDEX IDX ON #РейтингРазмеров(Кластер, Номенклатура, ХарактеристикаНоменклатуры)

				SELECT '#РейтингРазмеров' AS '#РейтингРазмеров'
				SELECT
					ОТ.Кластер AS Кластер
					--,ОТ.ТорговаяТочка AS ТорговаяТочка
					--,ОТ.Номенклатура AS Номенклатура
					--,SUM(ОТ.Рейтинг) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '22'
				FROM 
					#РейтингРазмеров AS ОТ
				GROUP BY
					ОТ.Кластер
					
				--RETURN
				/*
				SELECT * FROM #РейтингРазмеров AS ОТ
				WHERE
					ОТ.ХарактеристикаНоменклатуры IN ('15', '16', '17')
				ORDER BY
					ОТ.ХарактеристикаНоменклатуры
					,ОТ.ТорговаяТочка
				*/
			*/
			/* Сортировка размеров исходя из необходимости распределять хотя-бы через размер. До 15.04.2022. Окончание*/
			END

				--SELECT '#ТекущаяМартицаКоэффициентов' AS '#ТекущаяМартицаКоэффициентов'
				/*
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					--,ОТ.Номенклатура AS Номенклатура
					,SUM(ОТ.Коэффициент) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Коэффициент ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Коэффициент ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Коэффициент ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Коэффициент ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Коэффициент ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Коэффициент ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Коэффициент ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Коэффициент ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Коэффициент ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Коэффициент ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Коэффициент ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Коэффициент ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Коэффициент ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Коэффициент ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Коэффициент ELSE 0 END) AS '22'
				FROM 
					#ТекущаяМартицаКоэффициентов AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка
				*/

			BEGIN /* Сортировка размеров исходя из необходимости распределять хотя-бы через размер. */

				INSERT INTO #ЧерновикРейтингаРазмеров(Кластер, Номенклатура, Батч, РейтингБатча, КлассСовместимостиРазмеров, ХарактеристикаНоменклатуры, Рейтинг, РейтингКНДП, СтопЛист)
				SELECT DISTINCT 
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ВТ_1.Батч AS Батч 
					,ВТ_2.Порядок AS РейтингБатча
					,ВТ_1.КлассСовместимостиРазмеров AS КлассСовместимостиРазмеров
					,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
					,ROW_NUMBER() OVER (PARTITION BY ОТ.ТорговаяТочка, ОТ.Кластер, ОТ.Номенклатура, ВТ_1.Батч  ORDER BY ВТ_2.Порядок, ОТ.Коэффициент DESC, ОТ.ХарактеристикаНоменклатуры)  AS Рейтинг
					,NULL AS РейтингКНДП
					,0x00 AS СтопЛист
					--,RANK() OVER (PARTITION BY ОТ.ТорговаяТочка, ОТ.КластерДляПодсортировки, ОТ.Номенклатура  ORDER BY ОТ.Коэффициент DESC)  AS Рейтинг
				FROM #ТекущаяМартицаКоэффициентов AS ОТ
				INNER JOIN #БатчиРазмеров AS ВТ_1 ON
					ОТ.ХарактеристикаНоменклатуры = ВТ_1.Размер
				INNER JOIN #ПорядокБатчейРазмеров AS ВТ_2 ON
					ВТ_1.Батч = ВТ_2.Батч
				CREATE INDEX IDX ON #ЧерновикРейтингаРазмеров(Кластер, Номенклатура, Батч, ХарактеристикаНоменклатуры)
		
				--SELECT '#ЧерновикРейтингаРазмеров' AS '#ЧерновикРейтингаРазмеров'
				/*
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.Батч AS Батч
					,ОТ.КлассСовместимостиРазмеров AS КлассСовместимостиРазмеров
					--,SUM(ОТ.Рейтинг) AS Количество
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Рейтинг ELSE 0 END) AS '15'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Рейтинг ELSE 0 END) AS '15,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Рейтинг ELSE 0 END) AS '16'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Рейтинг ELSE 0 END) AS '16,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Рейтинг ELSE 0 END) AS '17'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Рейтинг ELSE 0 END) AS '17,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Рейтинг ELSE 0 END) AS '18'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Рейтинг ELSE 0 END) AS '18,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Рейтинг ELSE 0 END) AS '19'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Рейтинг ELSE 0 END) AS '19,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Рейтинг ELSE 0 END) AS '20'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Рейтинг ELSE 0 END) AS '20,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Рейтинг ELSE 0 END) AS '21'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Рейтинг ELSE 0 END) AS '21,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Рейтинг ELSE 0 END) AS '22'
				FROM 
					#ЧерновикРейтингаРазмеров AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.Номенклатура
					,ОТ.Батч
					,ОТ.КлассСовместимостиРазмеров
				*/
				--SELECT * FROM #ЧерновикРейтингаРазмеров
				
				TRUNCATE TABLE #РейтингКлассовСовместимостиРазмеров
				INSERT INTO #РейтингКлассовСовместимостиРазмеров(Кластер, Номенклатура, Батч, КлассСовместимостиРазмеров, РейтингКСР)
				SELECT 
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.Батч AS Батч
					,ОТ.КлассСовместимостиРазмеров AS КлассСовместимостиРазмеров
					--,MIN(ОТ.Рейтинг) AS МинимальныйРейтинг
					,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ОТ.Номенклатура, ОТ.Батч ORDER BY MIN(ОТ.Рейтинг)) AS РейтингКСР
				FROM
					#ЧерновикРейтингаРазмеров AS ОТ
				WHERE
					ОТ.Рейтинг > 0 
				GROUP BY 					
					ОТ.Кластер
					,ОТ.Номенклатура
					,ОТ.Батч
					,ОТ.КлассСовместимостиРазмеров
				
				--SELECT '#РейтингКлассовСовместимостиРазмеров' AS '#РейтингКлассовСовместимостиРазмеров'
				--SELECT * FROM #РейтингКлассовСовместимостиРазмеров
				
				-- Финальное приведение рейтинга КНДП к общему рейтингу по каждой номенклатуре. В дальнейшем Батчи не важны.
				INSERT INTO #РейтингРазмеров(Кластер, Номенклатура, Батч, РейтингБатча, ХарактеристикаНоменклатуры, РейтингКНДП)
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.Батч AS Батч
					,ОТ.РейтингБатча AS РейтингБатча
					,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
					,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ОТ.Номенклатура, ОТ.Батч ORDER BY ОТ.РейтингБатча, ВТ_1.РейтингКСР, ОТ.Рейтинг)
				FROM #ЧерновикРейтингаРазмеров AS ОТ
				LEFT JOIN #РейтингКлассовСовместимостиРазмеров AS ВТ_1
					ON ОТ.Кластер = ВТ_1.Кластер
					AND ОТ.Номенклатура = ВТ_1.Номенклатура
					AND ОТ.Батч = ВТ_1.Батч
					AND ОТ.КлассСовместимостиРазмеров = ВТ_1.КлассСовместимостиРазмеров

				CREATE INDEX IDX ON #РейтингРазмеров(Кластер, Номенклатура, Батч, ХарактеристикаНоменклатуры)
				/*
				SELECT '#РейтингРазмеров' AS '#РейтингРазмеров'
				SELECT * FROM #РейтингРазмеров
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Номенклатура AS Номенклатура
					,ОТ.Батч AS Батч
					--,SUM(ОТ.Рейтинг) AS Количество
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '15'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '15,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '16'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '16,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '17'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '17,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '18'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '18,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '19'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '19,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '20'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '20,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '21'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '21,5'
					,MAX(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '22'
				FROM 
					#РейтингРазмеров AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.Номенклатура 
					,ОТ.Батч
				*/
				--RETURN
				
				SELECT '#РейтингРазмеров' AS '#РейтингРазмеров'
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.Батч AS Батч
					--,ОТ.Номенклатура AS Номенклатура
					--,SUM(ОТ.Рейтинг) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '22'
				FROM 
					#РейтингРазмеров AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.Батч
				--RETURN
				/*
				SELECT * FROM #РейтингРазмеров AS ОТ
				WHERE
					ОТ.ХарактеристикаНоменклатуры IN ('15', '16', '17')
				ORDER BY
					ОТ.ХарактеристикаНоменклатуры
					,ОТ.ТорговаяТочка
				*/
			/* Сортировка размеров исходя из необходимости распределять хотя-бы через размер. */
			END

			BEGIN /* Распределение согласно новым рейтингам сортрировки.*/

				DROP TABLE IF EXISTS #ПланируемоеОбщееКоличествоНаТТПослеРаспределения -- Для сортировки ТТ таким образом чтобы "лучшие" размеры уходили сперва на магазины с меньше потребностью.
																					   -- Это должно в случае дефицита размеров исключить возможность попадания на ТТ одного изделия с 15 размером, в то время как на другую поедет 3 18-х размера. Пусть уж лучше один 18 уйдет на ТТ с маленьким запросом.
				CREATE TABLE #ПланируемоеОбщееКоличествоНаТТПослеРаспределения(
																				Кластер varchar(50)
																				,ТорговаяТочка varchar(50)
																				,Номенклатура varchar(50)
																				,Батч varchar(50)
																				,КоличествоБатча numeric(10)
																				,КоличествоТТ numeric(10)
																				)
				
				
				DROP TABLE IF EXISTS #Предложение_III -- Таблица, в которой будет храниться оставшееся на складе предложение в нужном формате
				CREATE TABLE #Предложение_III(
												Кластер varchar(50)
												,Склад varchar(50)
												,Номенклатура varchar(50)
												,ХарактеристикаНоменклатуры varchar(50)
												,ПорядокВГруппировке numeric(10)
												,ЦифровойМаркерВнутриНоменклатуры bigint
											)
				
				DROP TABLE IF EXISTS #Спрос_III -- Таблица, в которой будет оставшаяся потребность
				CREATE TABLE #Спрос_III(
										Кластер varchar(50)
										,ТорговаяТочка varchar(50)
										,Номенклатура varchar(50)
										,ХарактеристикаНоменклатуры varchar(50)
										,РейтингКНДП bigint
										,Количество numeric(10)
										,ПотребностьПоТТ numeric(10)
										,ЦифровойМаркерВнутриНоменклатуры bigint
										)
				
				DROP TABLE IF EXISTS #ПланРаспределенияСХарактеристиками
				CREATE TABLE #ПланРаспределенияСХарактеристиками(
																Кластер varchar(50)
																,Номенклатура varchar(50)
																,ХарактеристикаНоменклатуры varchar(50)
																,ТорговаяТочка varchar(50)
																,Количество numeric(10)
																)

				DROP TABLE IF EXISTS #ПланРаспределенияСХарактеристиками_Промежуточный
				CREATE TABLE #ПланРаспределенияСХарактеристиками_Промежуточный(
																Кластер varchar(50)
																,Номенклатура varchar(50)
																,ХарактеристикаНоменклатуры varchar(50)
																,ТорговаяТочка varchar(50)
																,Количество numeric(10)
																)

				DROP TABLE IF EXISTS #ТекущиеРейтингиРазмеров
				CREATE TABLE #ТекущиеРейтингиРазмеров(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,ХарактеристикаНоменклатуры varchar(50)
					,РейтингКНДП bigint
					)

				DROP TABLE IF EXISTS #ОстаткиБатчей
				CREATE TABLE #ОстаткиБатчей(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,Батч varchar(50)
					,Рейтинг bigint
					,Маркер bigint
					,Количество numeric(10)
					)
				

				-- При распределении обручальных колец необходимо в первом ("женском") батче распределить не все возможное количество,
				-- а только какую-то часть всех колец.
				-- чтобы и в "мужскую" часть попали изделия.
				DROP TABLE IF EXISTS #ПараметрыБатчей
				CREATE TABLE #ПараметрыБатчей(
					Кластер varchar(50)
					,Номенклатура varchar(50)
					,Батч varchar(50)
					,Коэффициент numeric(18,6)
					,Количество numeric(10)
					,БатчОбработан binary(1)
					)

				INSERT INTO #ПараметрыБатчей(Кластер, Номенклатура, Батч, Коэффициент, Количество, БатчОбработан)
				SELECT 
					ОТ.КластерДляПодсортировки AS Кластер 
					,ОТ.Номенклатура AS Номенклатура
					,ВТ_1.Батч AS Батч
					,SUM(ОТ.Количество)/MAX(ВТ.Количество) AS Коэффициент
					,SUM(ОТ.Количество) AS Количество
					,0x00 AS БатчОбработан
				FROM #ОстаткиСклада_СХарактеристиками AS ОТ
				INNER JOIN (SELECT 
								ОТ.КластерДляПодсортировки AS КластерДляПодсортировки 
								,ОТ.Номенклатура AS Номенклатура
								,SUM(ОТ.Количество) AS Количество
							FROM #ОстаткиСклада_СХарактеристиками AS ОТ
							GROUP BY 
								ОТ.КластерДляПодсортировки
								,ОТ.Номенклатура				
							) AS ВТ
					ON ОТ.КластерДляПодсортировки = ВТ.КластерДляПодсортировки
					AND ОТ.Номенклатура = ВТ.Номенклатура
				INNER JOIN #БатчиРазмеров AS ВТ_1
					ON ОТ.ХарактеристикаНоменклатуры = ВТ_1.Размер
				INNER JOIN #ПорядокБатчейРазмеров AS ВТ_2
					ON ВТ_1.Батч = ВТ_2.Батч						
				WHERE 
					ОТ.Количество > 0
				GROUP BY 
					ОТ.КластерДляПодсортировки 
					,ОТ.Номенклатура
					,ВТ_1.Батч

				CREATE INDEX IDX ON #ПараметрыБатчей (Кластер, Номенклатура, Батч) 
				
				SELECT '#ПараметрыБатчей' AS '#ПараметрыБатчей'
				SELECT * 
				FROM #ПараметрыБатчей AS ОТ 
				LEFT JOIN #ПорядокБатчейРазмеров AS ВТ
					ON ОТ.Батч = ВТ.Батч
				ORDER BY 
					ВТ.Порядок

				INSERT INTO #ПланируемоеОбщееКоличествоНаТТПослеРаспределения (Кластер, ТорговаяТочка, Номенклатура, Батч, КоличествоБатча, КоличествоТТ)
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					,ОТ.Номенклатура AS Номенклатура
					,ВТ.Батч AS Батч
					,SUM(ОТ.Количество) * MAX(ВТ.Коэффициент) AS КоличествоБатча
					,SUM(ОТ.Количество) AS КоличествоТТ
				FROM
				(
					SELECT
						ОТ.Кластер AS Кластер
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Количество AS Количество
					FROM #ОпорныйПлан AS ОТ
					UNION ALL
					SELECT
						ОТ.КластерДляПодсортировки AS Кластер
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Количество AS Количество
					FROM #ОстаткиТТ AS ОТ
				) AS ОТ
				LEFT JOIN #ПараметрыБатчей AS ВТ
					ON ОТ.Кластер = ВТ.Кластер
					AND ОТ.Номенклатура = ВТ.Номенклатура
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка
					,ОТ.Номенклатура
					,ВТ.Батч

				CREATE INDEX IDX ON #ПланируемоеОбщееКоличествоНаТТПослеРаспределения (Кластер, ТорговаяТочка, Номенклатура, Батч) 


				SELECT @ОсталосьБатчей = COUNT(ОТ.Батч) FROM #ПараметрыБатчей AS ОТ WHERE ОТ.БатчОбработан = 0x00
				SELECT @ОсталосьРаспределить = SUM(ОТ.Количество) FROM #ОпорныйПлан AS ОТ
				SET @ОстаВалосьРаспределить = 0

				WHILE @ОсталосьРаспределить > 0 AND (@ОстаВалосьРаспределить <> @ОсталосьРаспределить) OR @ОсталосьБатчей > 0
				BEGIN
					
					SET @ОстаВалосьРаспределить = @ОсталосьРаспределить

					TRUNCATE TABLE #Предложение_III
					INSERT INTO #Предложение_III (Кластер, Склад, Номенклатура, ХарактеристикаНоменклатуры, ПорядокВГруппировке, ЦифровойМаркерВнутриНоменклатуры)
					SELECT 
						ОТ.КластерДляПодсортировки AS Кластер
						,ОТ.Склад AS Склад
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,В_ТН.Номер AS ПорядокВГруппировке
						,ROW_NUMBER() OVER (PARTITION BY ОТ.КластерДляПодсортировки
													,ОТ.Номенклатура
													,ОТ.ХарактеристикаНоменклатуры
											ORDER BY В_ТН.Номер) AS ЦифровойМаркерВнутриНоменклатуры
					FROM #ОстаткиСклада_СХарактеристиками AS ОТ
					INNER JOIN @ТаблицаНомеров AS В_ТН
						ON ОТ.Количество >= В_ТН.Номер
					WHERE ОТ.Количество > 0
					
					SELECT '#Предложение_III' AS '#Предложение_III'
					SELECT 
						ОТ.Кластер 
						,ОТ.Номенклатура
						,ОТ.ХарактеристикаНоменклатуры
						,ОТ.ПорядокВГруппировке
						,ОТ.Склад
						,ОТ.ЦифровойМаркерВнутриНоменклатуры
					FROM #Предложение_III AS ОТ
					WHERE
						ОТ.ХарактеристикаНоменклатуры IN ('16,5', '17,5')
					ORDER BY 
						ОТ.Кластер 
						,ОТ.Номенклатура
						,ОТ.ХарактеристикаНоменклатуры
						,ОТ.ПорядокВГруппировке
					
					TRUNCATE TABLE #ОстаткиБатчей
					INSERT INTO #ОстаткиБатчей(Кластер, Номенклатура, Батч, Рейтинг, Маркер, Количество)
					SELECT 
						ОТ.КластерДляПодсортировки AS Кластер 
						,ОТ.Номенклатура AS Номенклатура
						,ВТ_1.Батч AS Батч
						,ВТ_2.Порядок AS Рейтинг
						,ROW_NUMBER() OVER (PARTITION BY ОТ.КластерДляПодсортировки, ОТ.Номенклатура ORDER BY ВТ_2.Порядок) AS Маркер
						,SUM(ОТ.Количество) AS Количество
					FROM #ОстаткиСклада_СХарактеристиками AS ОТ
					INNER JOIN #БатчиРазмеров AS ВТ_1
						ON ОТ.ХарактеристикаНоменклатуры = ВТ_1.Размер
					INNER JOIN #ПорядокБатчейРазмеров AS ВТ_2
						ON ВТ_1.Батч = ВТ_2.Батч
					INNER JOIN #ПараметрыБатчей AS ВТ_3
						ON ВТ_1.Батч = ВТ_3.Батч
						AND ВТ_3.БатчОбработан = 0x00
					WHERE 
						ОТ.Количество > 0
					GROUP BY 
						ОТ.КластерДляПодсортировки 
						,ОТ.Номенклатура
						,ВТ_1.Батч
						,ВТ_2.Порядок
					
					SELECT '#ОстаткиБатчей' AS '#ОстаткиБатчей'
					SELECT * FROM #ОстаткиБатчей AS ОТ
					WHERE ОТ.Маркер = 1
					SELECT * FROM #ОстаткиБатчей AS ОТ

					--RETURN
					TRUNCATE TABLE #ТекущиеРейтингиРазмеров
					INSERT INTO #ТекущиеРейтингиРазмеров(Кластер, Номенклатура, ХарактеристикаНоменклатуры, РейтингКНДП)
					SELECT
						ОТ.Кластер AS Кластер
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ROW_NUMBER() OVER (PARTITION BY ОТ.Кластер, ОТ.Номенклатура ORDER BY MAX(ОТ.РейтингКНДП)) AS РейтингКНДП
					FROM #РейтингРазмеров AS ОТ
					INNER JOIN (SELECT
									ОТ.Кластер AS Кластер
									,ОТ.Номенклатура AS Номенклатура
									,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
								FROM #Предложение_III AS ОТ
								GROUP BY 
									ОТ.Кластер
									,ОТ.Номенклатура
									,ОТ.ХарактеристикаНоменклатуры
								) AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ХарактеристикаНоменклатуры = ВТ.ХарактеристикаНоменклатуры
					INNER JOIN #БатчиРазмеров AS ВТ_1
						ON ОТ.ХарактеристикаНоменклатуры = ВТ_1.Размер
					INNER JOIN #ОстаткиБатчей AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.Номенклатура = ВТ_2.Номенклатура
						AND ОТ.Номенклатура = ВТ_2.Номенклатура
						AND ВТ_1.Батч = ВТ_2.Батч
						AND ВТ_2.Маркер = 1
					GROUP BY
						ОТ.Кластер
						,ОТ.Номенклатура
						,ОТ.ХарактеристикаНоменклатуры

					SELECT '#ТекущиеРейтингиРазмеров' AS '#ТекущиеРейтингиРазмеров'
					--SELECT * FROM #ТекущиеРейтингиРазмеров
					SELECT
						ОТ.Кластер AS Кластер
						--,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						--,SUM(ОТ.Рейтинг) AS Количество
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '15'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '15,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '16'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '16,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '17'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '17,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '18'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '18,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '19'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '19,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '20'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '20,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '21'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.РейтингКНДП ELSE 0 END) AS '21,5'
						,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.РейтингКНДП ELSE 0 END) AS '22'
					FROM 
						#ТекущиеРейтингиРазмеров AS ОТ
					GROUP BY
						ОТ.Кластер
						,ОТ.Номенклатура
					
					SELECT * FROM #Спрос_III

					TRUNCATE TABLE #Спрос_III
					SELECT * FROM #Спрос_III

					INSERT INTO #Спрос_III(Кластер, ТорговаяТочка, Номенклатура, ХарактеристикаНоменклатуры, РейтингКНДП, Количество, ПотребностьПоТТ, ЦифровойМаркерВнутриНоменклатуры)
					SELECT 
						ОТ.Кластер AS Кластер
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Номенклатура AS Номенклатура
						,ВТ_2.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ВТ_2.РейтингКНДП AS РейтингКНДП
						--,В_ТН.Номер AS ПорядокВГруппировке
						,ОТ.Количество AS Количество
						,(1 - В_ПРБ.РаспределятьПолностью) * ВТ_1.КоличествоБатча + В_ПРБ.РаспределятьПолностью * ВТ_1.КоличествоТТ AS ПотребностьПоТТ -- Смысл формулы в следующем: Если распределять весь остаток, то умножаем на 1, а если нужно взять лишь часть потребности на ТТ, то умножаем на коэффициент.
						,ROW_NUMBER() OVER (PARTITION BY
												ОТ.Кластер 
												,ОТ.Номенклатура
												,ВТ_2.ХарактеристикаНоменклатуры
											ORDER BY 
												(1 - В_ПРБ.РаспределятьПолностью) * ВТ_1.КоличествоБатча + В_ПРБ.РаспределятьПолностью * ВТ_1.КоличествоТТ * В_ПРБ.ПорядокСортировкиТТ ASC
												,ОТ.ТорговаяТочка) AS ЦифровойМаркерВнутриНоменклатуры					
					FROM #ОпорныйПлан AS ОТ
					LEFT JOIN #ТекущиеРейтингиРазмеров AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						--AND ОТ.Характ = ВТ_2.ХарактеристикаНоменклатуры
						AND ОТ.Номенклатура = ВТ_2.Номенклатура
						--AND ВТ_1.Количество >= ВТ_2.РейтингКНДП
					INNER JOIN #БатчиРазмеров AS В_БР
						ON ВТ_2.ХарактеристикаНоменклатуры = В_БР.Размер
					INNER JOIN #ПорядокБатчейРазмеров AS В_ПРБ
						ON В_БР.Батч = В_ПРБ.Батч
					INNER JOIN #ПараметрыБатчей AS В_КБ
						ON ОТ.Кластер = В_КБ.Кластер
						AND ОТ.Номенклатура = В_КБ.Номенклатура
						AND В_БР.Батч = В_КБ.Батч
					LEFT JOIN #ПланируемоеОбщееКоличествоНаТТПослеРаспределения AS ВТ_1
						ON ОТ.Кластер = ВТ_1.Кластер
						AND ОТ.ТорговаяТочка = ВТ_1.ТорговаяТочка
						AND ОТ.Номенклатура = ВТ_1.Номенклатура
						AND В_ПРБ.Батч = ВТ_1.Батч
					--INNER JOIN @ТаблицаНомеров AS В_ТН
					--	ON ВТ_1.Количество >= В_ТН.Номер					
					/*LEFT JOIN #РейтингРазмеров AS ВТ_2
						ON ОТ.Кластер = ВТ_2.Кластер
						AND ОТ.ТорговаяТочка = ВТ_2.ТорговаяТочка
						AND ОТ.Номенклатура = ВТ_2.Номенклатура
						AND ВТ_1.Количество >= ВТ_2.РейтингКНДП*/
					WHERE ОТ.Количество > 0
						AND (1 - В_ПРБ.РаспределятьПолностью) * ВТ_1.КоличествоБатча + В_ПРБ.РаспределятьПолностью * ВТ_1.КоличествоТТ >= ВТ_2.РейтингКНДП

						--AND ОТ.Номенклатура IN ('СР71')
				
					SELECT '#Спрос_III' AS '#Спрос_III' 
					SELECT 
						ОТ.Кластер 
						,ОТ.Номенклатура
						,ОТ.ХарактеристикаНоменклатуры
						,ОТ.РейтингКНДП
						,ОТ.Количество
						,ОТ.ПотребностьПоТТ
						,ОТ.ТорговаяТочка
						,ОТ.ЦифровойМаркерВнутриНоменклатуры
					FROM #Спрос_III AS ОТ
					WHERE
						ОТ.ХарактеристикаНоменклатуры IN('16,5', '17,5')
						OR ОТ.ТорговаяТочка IN ('Калуга,21 век,секция 2', 'Норильск,Стрит Ленинский,секция')
					ORDER BY 
						ОТ.Кластер 
						,ОТ.Номенклатура
						,ОТ.ХарактеристикаНоменклатуры
						,ОТ.ЦифровойМаркерВнутриНоменклатуры
					
					TRUNCATE TABLE #ПланРаспределенияСХарактеристиками_Промежуточный
					INSERT INTO #ПланРаспределенияСХарактеристиками_Промежуточный (Кластер, Номенклатура, ХарактеристикаНоменклатуры, ТорговаяТочка, Количество)
					SELECT
						ОТ.Кластер AS Кластер
						,ОТ.Номенклатура AS Номенклатура
						,ВТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,SUM(1) AS Количество
					FROM #Спрос_III AS ОТ
					INNER JOIN #Предложение_III AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ХарактеристикаНоменклатуры = ВТ.ХарактеристикаНоменклатуры
						AND ОТ.ЦифровойМаркерВнутриНоменклатуры = ВТ.ЦифровойМаркерВнутриНоменклатуры
					GROUP BY
						ОТ.Кластер
						,ОТ.Номенклатура
						,ВТ.ХарактеристикаНоменклатуры
						,ОТ.ТорговаяТочка
					
					UPDATE ОТ
						SET ОТ.Количество = ОТ.Количество + ВТ.Количество
					FROM #ПланРаспределенияСХарактеристиками AS ОТ
					INNER JOIN #ПланРаспределенияСХарактеристиками_Промежуточный AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ХарактеристикаНоменклатуры = ВТ.ХарактеристикаНоменклатуры
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка

					INSERT INTO #ПланРаспределенияСХарактеристиками (Кластер, Номенклатура, ХарактеристикаНоменклатуры, ТорговаяТочка, Количество)
					SELECT
						ОТ.Кластер AS Кластер
						,ОТ.Номенклатура AS Номенклатура
						,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.Количество AS Количество
					FROM #ПланРаспределенияСХарактеристиками_Промежуточный AS ОТ
					LEFT JOIN #ПланРаспределенияСХарактеристиками AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ХарактеристикаНоменклатуры = ВТ.ХарактеристикаНоменклатуры
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
					WHERE ВТ.Количество IS NULL

					UPDATE ОТ
						SET ОТ.Количество = ОТ.Количество - ВТ.Количество
					FROM #ОстаткиСклада_СХарактеристиками AS ОТ
					INNER JOIN (SELECT
									ОТ.Кластер AS Кластер
									,ОТ.Номенклатура AS Номенклатура
									,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры					
									,SUM(ОТ.Количество) AS Количество
								FROM #ПланРаспределенияСХарактеристиками_Промежуточный AS ОТ
								GROUP BY
									ОТ.Кластер
									,ОТ.Номенклатура
									,ОТ.ХарактеристикаНоменклатуры					
								) AS ВТ
						ON ОТ.КластерДляПодсортировки = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ХарактеристикаНоменклатуры = ВТ.ХарактеристикаНоменклатуры
					
					UPDATE ОТ
						SET ОТ.КоличествоТТ = ОТ.КоличествоТТ - ВТ.Количество
					FROM #ПланируемоеОбщееКоличествоНаТТПослеРаспределения AS ОТ
					INNER JOIN (SELECT
									ОТ.Кластер AS Кластер
									,ОТ.Номенклатура AS Номенклатура
									,ОТ.ТорговаяТочка AS ТорговаяТочка					
									,SUM(ОТ.Количество) AS Количество
								FROM #ПланРаспределенияСХарактеристиками_Промежуточный AS ОТ
								GROUP BY
									ОТ.Кластер
									,ОТ.Номенклатура
									,ОТ.ТорговаяТочка					
								) AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка

					UPDATE ОТ
						SET ОТ.КоличествоБатча = ОТ.КоличествоБатча - ВТ.Количество
					FROM #ПланируемоеОбщееКоличествоНаТТПослеРаспределения AS ОТ
					INNER JOIN (SELECT
									ОТ.Кластер AS Кластер
									,ОТ.Номенклатура AS Номенклатура
									,ОТ.ТорговаяТочка AS ТорговаяТочка
									,ВТ.Батч AS Батч
									,SUM(ОТ.Количество) AS Количество
								FROM #ПланРаспределенияСХарактеристиками_Промежуточный AS ОТ
								LEFT JOIN #БатчиРазмеров AS ВТ
									ON ОТ.ХарактеристикаНоменклатуры = ВТ.Размер
								GROUP BY
									ОТ.Кластер
									,ОТ.Номенклатура
									,ОТ.ТорговаяТочка
									,ВТ.Батч
								) AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка
						AND ОТ.Батч = ВТ.Батч


					UPDATE ОТ
						SET ОТ.Количество = ОТ.Количество - ВТ.Количество
					FROM #ОпорныйПлан AS ОТ
					INNER JOIN (SELECT
									ОТ.Кластер AS Кластер
									,ОТ.Номенклатура AS Номенклатура
									,ОТ.ТорговаяТочка AS ТорговаяТочка					
									,SUM(ОТ.Количество) AS Количество
								FROM #ПланРаспределенияСХарактеристиками_Промежуточный AS ОТ
								GROUP BY
									ОТ.Кластер
									,ОТ.Номенклатура
									,ОТ.ТорговаяТочка					
								) AS ВТ
						ON ОТ.Кластер = ВТ.Кластер
						AND ОТ.Номенклатура = ВТ.Номенклатура
						AND ОТ.ТорговаяТочка = ВТ.ТорговаяТочка

					SELECT @ОсталосьРаспределить = SUM(ОТ.Количество) FROM #ОпорныйПлан AS ОТ

					UPDATE ОТ
						SET ОТ.БатчОбработан = 0x01
					FROM #ПараметрыБатчей AS ОТ
					LEFT JOIN #ОстаткиБатчей AS ВТ
						ON ОТ.Батч = ВТ.Батч
						AND ОТ.БатчОбработан = 0x00
					WHERE 
						ВТ.Батч IS NULL

					IF @ОсталосьРаспределить > 0 AND (@ОстаВалосьРаспределить = @ОсталосьРаспределить)
					BEGIN
						UPDATE ОТ
							SET ОТ.БатчОбработан = 0x01
						FROM #ПараметрыБатчей AS ОТ
						INNER JOIN #ОстаткиБатчей AS ВТ
							ON ОТ.Батч = ВТ.Батч
							AND ОТ.БатчОбработан = 0x00
							AND ВТ.Маркер = 1
					END

					SELECT @ОсталосьБатчей = COUNT(ОТ.Батч) FROM #ПараметрыБатчей AS ОТ WHERE ОТ.БатчОбработан = 0x00

					SELECT 
						@ОсталосьРаспределить AS '@ОсталосьРаспределить'
						,@ОстаВалосьРаспределить AS '@ОстаВалосьРаспределить'
						,@ОсталосьБатчей AS '@ОсталосьБатчей'

				/*WHILE @ОсталосьРаспределить > 0*/
				END
							
				SELECT '#ПланРаспределенияСХарактеристиками' AS '#ПланРаспределенияСХарактеристиками'
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					--,ОТ.Номенклатура AS Номенклатура
					,SUM(ОТ.Количество) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Количество ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Количество ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Количество ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Количество ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Количество ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Количество ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Количество ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Количество ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Количество ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Количество ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Количество ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Количество ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Количество ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Количество ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Количество ELSE 0 END) AS '22'
				FROM #ПланРаспределенияСХарактеристиками AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка
					--,ОТ.Номенклатура

				SELECT '#ПланРаспределенияСХарактеристиками+#ОстаткиТТ' AS '#ПланРаспределенияСХарактеристиками+#ОстаткиТТ'
				SELECT
					ОТ.Кластер AS Кластер
					,ОТ.ТорговаяТочка AS ТорговаяТочка
					--,ОТ.Номенклатура AS Номенклатура
					,SUM(ОТ.Количество) AS Количество
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15'   THEN ОТ.Количество ELSE 0 END) AS '15'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '15,5' THEN ОТ.Количество ELSE 0 END) AS '15,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16'   THEN ОТ.Количество ELSE 0 END) AS '16'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '16,5' THEN ОТ.Количество ELSE 0 END) AS '16,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17'   THEN ОТ.Количество ELSE 0 END) AS '17'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '17,5' THEN ОТ.Количество ELSE 0 END) AS '17,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18'   THEN ОТ.Количество ELSE 0 END) AS '18'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '18,5' THEN ОТ.Количество ELSE 0 END) AS '18,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19'   THEN ОТ.Количество ELSE 0 END) AS '19'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '19,5' THEN ОТ.Количество ELSE 0 END) AS '19,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20'   THEN ОТ.Количество ELSE 0 END) AS '20'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '20,5' THEN ОТ.Количество ELSE 0 END) AS '20,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21'   THEN ОТ.Количество ELSE 0 END) AS '21'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '21,5' THEN ОТ.Количество ELSE 0 END) AS '21,5'
					,SUM(CASE WHEN ОТ.ХарактеристикаНоменклатуры = '22'   THEN ОТ.Количество ELSE 0 END) AS '22'
				FROM 
					(SELECT
						ОТ.Кластер AS Кластер
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ОТ.Количество AS Количество
					 FROM
						#ПланРаспределенияСХарактеристиками AS ОТ

					UNION ALL

					SELECT
						ОТ.КластерДляПодсортировки AS Кластер
						,ОТ.ТорговаяТочка AS ТорговаяТочка
						,ОТ.ХарактеристикаНоменклатуры AS ХарактеристикаНоменклатуры
						,ОТ.Количество AS Количество
					 FROM
						#ОстаткиТТ_СХарактеристиками AS ОТ
					) AS ОТ
				GROUP BY
					ОТ.Кластер
					,ОТ.ТорговаяТочка

			/* Распределение согласно новым рейтингам сортрировки.*/
			END

		/*Распределение характеристик по оптимальному плану. Вариант II*/
		END

	/* Основной код процедуры. Конец. */
END 
